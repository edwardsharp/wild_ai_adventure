# Multi-stage Dockerfile for testing environment
FROM rust:1.75-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for TypeScript client testing
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install additional Rust tools for testing
RUN cargo install cargo-llvm-cov sqlx-cli --no-default-features --features postgres

# Set working directory
WORKDIR /workspace

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./
COPY server/Cargo.toml ./server/
COPY cli/Cargo.toml ./cli/

# Create dummy source files to build dependencies
RUN mkdir -p server/src cli/src && \
    echo "fn main() {}" > server/src/main.rs && \
    echo "fn main() {}" > cli/src/main.rs

# Build dependencies
RUN cargo build --workspace --all-features

# Remove dummy source files
RUN rm -rf server/src cli/src

# Test runtime stage
FROM rust:1.75-slim as test-runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    libpq5 \
    ca-certificates \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for TypeScript testing
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy Rust tools from builder
COPY --from=builder /usr/local/cargo/bin/cargo-llvm-cov /usr/local/cargo/bin/
COPY --from=builder /usr/local/cargo/bin/sqlx /usr/local/cargo/bin/

# Copy dependency cache from builder
COPY --from=builder /usr/local/cargo/registry /usr/local/cargo/registry
COPY --from=builder /workspace/target /workspace/target

# Set working directory
WORKDIR /workspace

# Set environment variables for testing
ENV RUST_LOG=debug
ENV RUST_BACKTRACE=1
ENV CARGO_TARGET_DIR=/workspace/target

# Health check script
COPY scripts/health-check.sh /usr/local/bin/health-check
RUN chmod +x /usr/local/bin/health-check

# Default command runs all tests
CMD ["bash", "scripts/build_and_test.sh", "full"]

# Development stage with hot reloading
FROM test-runtime as dev

# Install cargo-watch for hot reloading
RUN cargo install cargo-watch

# Expose common ports
EXPOSE 3000 8080 9090

# Development command with file watching
CMD ["cargo", "watch", "-x", "test", "-x", "run"]
