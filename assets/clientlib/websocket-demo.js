import{b as Ee,d as Ce,a as $,f as Se,j as ke,t as w,i as l,c as E,m as ee,S as B,F as te,g as H,u as Le}from"./index-Bvkbunlo.js";class xe extends EventTarget{socket=null;status="disconnected";options;reconnectAttempts=0;reconnectTimer;pingTimer;connectionId="";userCount=0;constructor(e){super(),this.options={autoReconnect:!0,reconnectDelay:3e3,maxReconnectAttempts:5,pingInterval:3e4,...e}}connect(){return new Promise((e,t)=>{if(this.socket?.readyState===WebSocket.OPEN){e();return}this.setStatus("connecting");try{this.socket=new WebSocket(this.options.url),this.setupSocketListeners(e,t)}catch(n){this.setStatus("error"),t(n)}})}disconnect(){this.clearTimers(),this.options.autoReconnect=!1,this.socket&&this.socket.close(1e3,"Manual disconnect")}send(e){if(!this.isConnected())return this.dispatchEvent(new CustomEvent("error",{detail:{error:"Cannot send message: not connected"}})),!1;try{const t=JSON.stringify(e);return this.socket.send(t),this.dispatchEvent(new CustomEvent("message-sent",{detail:{message:e}})),!0}catch(t){return this.dispatchEvent(new CustomEvent("error",{detail:{error:`Send error: ${t}`}})),!1}}ping(){this.send({type:"Ping"})}isConnected(){return this.socket?.readyState===WebSocket.OPEN}getStatus(){return this.status}getUserCount(){return this.userCount}getConnectionId(){return this.connectionId}setStatus(e){if(this.status===e)return;this.status=e;const t={status:e,userCount:this.userCount,connectionId:this.connectionId,timestamp:Date.now()};this.dispatchEvent(new CustomEvent("status-change",{detail:t}))}setupSocketListeners(e,t){this.socket&&(this.socket.onopen=()=>{this.setStatus("connected"),this.reconnectAttempts=0,this.setupPingTimer(),e()},this.socket.onclose=n=>{this.clearTimers(),this.setStatus("disconnected"),this.socket=null,this.dispatchEvent(new CustomEvent("connection-closed",{detail:{code:n.code,reason:n.reason}})),this.options.autoReconnect&&this.reconnectAttempts<this.options.maxReconnectAttempts&&this.scheduleReconnect()},this.socket.onerror=n=>{this.setStatus("error"),this.dispatchEvent(new CustomEvent("connection-error",{detail:{error:n}})),this.reconnectAttempts===0&&t(n)},this.socket.onmessage=n=>{this.handleMessage(n.data)})}handleMessage(e){try{const t=JSON.parse(e);switch(t.type){case"Welcome":this.connectionId=t.data?.connection_id||"";break;case"ConnectionStatus":this.userCount=t.data?.user_count||0,this.setStatus(this.status);break;case"Pong":this.dispatchEvent(new CustomEvent("pong",{detail:{timestamp:Date.now()}}));break;case"Error":this.dispatchEvent(new CustomEvent("server-error",{detail:{error:t.data?.message||"Server error"}}));break}this.dispatchEvent(new CustomEvent("message",{detail:{message:t,raw:e}}))}catch(t){this.dispatchEvent(new CustomEvent("parse-error",{detail:{error:t,rawMessage:e,messageLength:e.length}}))}}scheduleReconnect(){this.reconnectAttempts++,this.dispatchEvent(new CustomEvent("reconnecting",{detail:{attempt:this.reconnectAttempts,maxAttempts:this.options.maxReconnectAttempts,delay:this.options.reconnectDelay}})),this.reconnectTimer=window.setTimeout(()=>{this.connect().catch(()=>{})},this.options.reconnectDelay)}setupPingTimer(){this.options.pingInterval>0&&(this.pingTimer=window.setInterval(()=>{this.isConnected()&&this.ping()},this.options.pingInterval))}clearTimers(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=void 0),this.pingTimer&&(clearInterval(this.pingTimer),this.pingTimer=void 0)}destroy(){this.disconnect(),this.clearTimers(),this.removeAllListeners()}removeAllListeners(){["status-change","message","connection-closed","connection-error","message-sent","error","pong","server-error","parse-error","reconnecting"].forEach(t=>{(this._listeners?.[t]||[]).forEach(s=>{this.removeEventListener(t,s)})})}}class Be extends EventTarget{blobs=[];blobDataCache=new Map;loadingBlobs=new Set;constructor(){super()}updateBlobs(e){this.blobs=[...e],this.dispatchEvent(new CustomEvent("blobs-updated",{detail:{blobs:this.blobs,count:this.blobs.length}}))}getBlobs(){return[...this.blobs]}getBlob(e){return this.blobs.find(t=>t.id===e)}cacheBlobData(e){if(!e.id||!e.data)return;const t=new Uint8Array(e.data),n=new Blob([t],{type:e.mime||"application/octet-stream"}),s=URL.createObjectURL(n);this.blobDataCache.set(e.id,s),this.loadingBlobs.delete(e.id),this.dispatchEvent(new CustomEvent("blob-data-cached",{detail:{id:e.id,dataUrl:s,mime:e.mime}}))}isCached(e){return this.blobDataCache.has(e)}getCachedDataUrl(e){return this.blobDataCache.get(e)}isLoading(e){return this.loadingBlobs.has(e)}markAsLoading(e){this.loadingBlobs.add(e)}requestBlobData(e){this.isCached(e)||this.isLoading(e)||(this.markAsLoading(e),this.dispatchEvent(new CustomEvent("blob-data-requested",{detail:{id:e}})))}getBlobDisplayInfo(e){return{id:e.id,mime:e.mime||"Unknown type",size:this.formatFileSize(e.size),sha256:e.sha256,clientId:e.source_client_id||"Unknown",path:e.local_path||"None",createdAt:new Date(e.created_at).toLocaleString(),metadata:Object.keys(e.metadata||{}).length>0?JSON.stringify(e.metadata):"",thumbnailHtml:this.generateThumbnailHtml(e)}}generateThumbnailHtml(e){const t=e.mime||"",n=this.getCachedDataUrl(e.id),s=this.isLoading(e.id),i="width: 80px; height: 80px; border-radius: 4px; object-fit: cover;",a="display: flex; align-items: center; justify-content: center; background: #f0f0f0; font-size: 0.7em; border-radius: 4px; cursor: pointer;";return t.startsWith("image/")?n?`<img src="${n}" alt="Thumbnail" style="${i}" loading="lazy">`:s?`<div style="${i} ${a}">Loading...</div>`:`<div style="${i} ${a}" data-blob-id="${e.id}">LOAD IMAGE</div>`:t.startsWith("video/")?n?`<video style="${i}" controls muted><source src="${n}" type="${t}"></video>`:s?`<div style="${i} ${a}">Loading...</div>`:`<div style="${i} ${a}" data-blob-id="${e.id}">LOAD VIDEO</div>`:t.startsWith("audio/")?n?`<audio style="${i}" controls><source src="${n}" type="${t}"></audio>`:s?`<div style="${i} ${a}">Loading...</div>`:`<div style="${i} ${a}" data-blob-id="${e.id}">LOAD AUDIO</div>`:t==="application/pdf"?`<div style="${i} ${a}">PDF</div>`:`<div style="${i} ${a}">FILE</div>`}downloadBlob(e,t){const n=this.getCachedDataUrl(e);if(!n)return this.requestBlobData(e),!1;const s=this.getBlob(e),i=t||s?.local_path||`blob-${e}`,a=document.createElement("a");return a.href=n,a.download=i,document.body.appendChild(a),a.click(),document.body.removeChild(a),this.dispatchEvent(new CustomEvent("blob-downloaded",{detail:{id:e,filename:i}})),!0}viewBlob(e){const t=this.getCachedDataUrl(e);return t?(window.open(t,"_blank"),this.dispatchEvent(new CustomEvent("blob-viewed",{detail:{id:e}})),!0):(this.requestBlobData(e),!1)}formatFileSize(e){if(!e)return"Unknown size";const t=["B","KB","MB","GB"];let n=e,s=0;for(;n>=1024&&s<t.length-1;)n/=1024,s++;return`${n.toFixed(1)} ${t[s]}`}clearCache(){for(const e of this.blobDataCache.values())URL.revokeObjectURL(e);this.blobDataCache.clear(),this.loadingBlobs.clear(),this.dispatchEvent(new CustomEvent("cache-cleared",{detail:{timestamp:Date.now()}}))}getCacheStats(){return{cachedCount:this.blobDataCache.size,loadingCount:this.loadingBlobs.size,totalBlobs:this.blobs.length}}destroy(){this.clearCache(),this.blobs=[],["blobs-updated","blob-data-cached","blob-data-requested","blob-downloaded","blob-viewed","cache-cleared"].forEach(t=>{(this._listeners?.[t]||[]).forEach(s=>{this.removeEventListener(t,s)})})}}class _e extends EventTarget{uploads=new Map;options;constructor(e={}){super(),this.options={maxFileSize:10*1024*1024,allowedMimeTypes:[],clientId:"web-client",chunkSize:64*1024,...e}}async addFiles(e){const t=Array.from(e),n=[];for(const s of t){const i=crypto.randomUUID();n.push(i);const a={file:s,id:i,progress:0,status:"pending"};this.uploads.set(i,a),this.processFile(i)}return n}getUpload(e){return this.uploads.get(e)}getAllUploads(){return Array.from(this.uploads.values())}clearCompleted(){for(const[e,t]of this.uploads.entries())(t.status==="completed"||t.status==="error")&&this.uploads.delete(e);this.dispatchEvent(new CustomEvent("uploads-cleared",{detail:{timestamp:Date.now()}}))}cancelUpload(e){const t=this.uploads.get(e);t&&t.status!=="completed"&&(t.status="error",t.error="Cancelled by user",this.dispatchEvent(new CustomEvent("upload-cancelled",{detail:{uploadId:e,file:t.file}})))}async processFile(e){const t=this.uploads.get(e);if(t)try{t.status="processing",t.progress=0,this.dispatchEvent(new CustomEvent("upload-started",{detail:{uploadId:e,file:t.file}})),this.validateFile(t.file),t.progress=10;const n=await this.readFile(t.file);t.progress=30;const s=await this.calculateSHA256(n);t.progress=60;const i=this.createProcessedBlob(t.file,n,s);t.progress=90,t.status="uploading",t.progress=100,this.dispatchEvent(new CustomEvent("upload-processed",{detail:{uploadId:e,file:t.file,blob:i}})),t.status="completed",this.dispatchEvent(new CustomEvent("upload-completed",{detail:{uploadId:e,file:t.file,blob:i}}))}catch(n){t.status="error",t.error=n instanceof Error?n.message:String(n),this.dispatchEvent(new CustomEvent("upload-error",{detail:{uploadId:e,file:t.file,error:t.error}}))}}validateFile(e){if(e.size>this.options.maxFileSize)throw new Error(`File "${e.name}" is too large (${this.formatFileSize(e.size)}). Maximum size is ${this.formatFileSize(this.options.maxFileSize)}.`);if(this.options.allowedMimeTypes.length>0){const t=e.type||"application/octet-stream";if(!this.options.allowedMimeTypes.includes(t))throw new Error(`File type "${t}" is not allowed. Allowed types: ${this.options.allowedMimeTypes.join(", ")}`)}if(e.size===0)throw new Error(`File "${e.name}" is empty.`)}readFile(e){return new Promise((t,n)=>{const s=new FileReader;s.onload=()=>{s.result instanceof ArrayBuffer?t(s.result):n(new Error("Failed to read file as ArrayBuffer"))},s.onerror=()=>{n(new Error(`Failed to read file: ${s.error?.message||"Unknown error"}`))},s.readAsArrayBuffer(e)})}async calculateSHA256(e){const t=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(t)).map(s=>s.toString(16).padStart(2,"0")).join("")}createProcessedBlob(e,t,n){const s=Array.from(new Uint8Array(t)),i=new Date().toISOString();return{id:crypto.randomUUID(),data:s,sha256:n,size:e.size,mime:e.type||"application/octet-stream",source_client_id:this.options.clientId,local_path:e.name,metadata:{originalName:e.name,lastModified:e.lastModified,uploadedAt:i,userAgent:navigator.userAgent},created_at:i,updated_at:i}}formatFileSize(e){if(!e)return"Unknown size";const t=["B","KB","MB","GB"];let n=e,s=0;for(;n>=1024&&s<t.length-1;)n/=1024,s++;return`${n.toFixed(1)} ${t[s]}`}getStats(){const e=Array.from(this.uploads.values());return{total:e.length,pending:e.filter(t=>t.status==="pending").length,processing:e.filter(t=>t.status==="processing").length,uploading:e.filter(t=>t.status==="uploading").length,completed:e.filter(t=>t.status==="completed").length,errors:e.filter(t=>t.status==="error").length}}updateOptions(e){this.options={...this.options,...e},this.dispatchEvent(new CustomEvent("options-updated",{detail:{options:this.options}}))}destroy(){this.uploads.clear(),["upload-started","upload-processed","upload-completed","upload-error","upload-cancelled","uploads-cleared","options-updated"].forEach(t=>{(this._listeners?.[t]||[]).forEach(s=>{this.removeEventListener(t,s)})})}}class De extends EventTarget{connection;blobManager;uploadHandler;eventLog=[];options;constructor(e,t={}){super(),this.options={autoGetMediaBlobs:!0,logLevel:"info",...t},this.connection=new xe({url:e,...this.options.websocket}),this.blobManager=new Be,this.uploadHandler=new _e({clientId:"demo-client",...this.options.fileUpload}),this.setupEventHandlers()}async connect(){return this.log("info","Connecting to WebSocket server"),this.connection.connect()}disconnect(){this.log("info","Disconnecting from WebSocket server"),this.connection.disconnect()}ping(){this.log("debug","Sending ping"),this.connection.ping()}getMediaBlobs(e=10,t=0){this.log("debug",`Requesting media blobs (limit: ${e}, offset: ${t})`),this.connection.send({type:"GetMediaBlobs",data:{limit:e,offset:t}})}async uploadFiles(e){return this.log("info",`Starting upload of ${e.length} file(s)`),this.uploadHandler.addFiles(e)}downloadBlob(e,t){return this.log("debug",`Downloading blob: ${e}`),this.blobManager.downloadBlob(e,t)}viewBlob(e){return this.log("debug",`Viewing blob: ${e}`),this.blobManager.viewBlob(e)}loadBlobData(e){this.log("debug",`Loading blob data: ${e}`),this.blobManager.requestBlobData(e)}getConnectionStatus(){return this.connection.getStatus()}isConnected(){return this.connection.isConnected()}getUserCount(){return this.connection.getUserCount()}getConnectionId(){return this.connection.getConnectionId()}getBlobs(){return this.blobManager.getBlobs()}getBlobDisplayInfo(e){return this.blobManager.getBlobDisplayInfo(e)}getUploadStats(){return this.uploadHandler.getStats()}getCacheStats(){return this.blobManager.getCacheStats()}clearCompletedUploads(){this.uploadHandler.clearCompleted()}clearBlobCache(){this.blobManager.clearCache()}getEventLog(){return[...this.eventLog]}clearEventLog(){this.eventLog=[],this.dispatchEvent(new CustomEvent("log-cleared",{detail:{timestamp:Date.now()}}))}setupEventHandlers(){this.connection.addEventListener("status-change",e=>{const{status:t,userCount:n,connectionId:s}=e.detail;this.log("info",`Connection status changed: ${t}`,{userCount:n,connectionId:s}),this.dispatchEvent(new CustomEvent("status-change",{detail:e.detail})),t==="connected"&&this.options.autoGetMediaBlobs&&setTimeout(()=>this.getMediaBlobs(),100)}),this.connection.addEventListener("message",e=>{const{message:t}=e.detail;this.handleServerMessage(t)}),this.connection.addEventListener("connection-error",e=>{this.log("error","Connection error",e.detail),this.dispatchEvent(new CustomEvent("connection-error",{detail:e.detail}))}),this.connection.addEventListener("pong",e=>{this.log("debug","Pong received"),this.dispatchEvent(new CustomEvent("pong",{detail:e.detail}))}),this.blobManager.addEventListener("blobs-updated",e=>{this.log("info",`Media blobs updated: ${e.detail.count} blobs`),this.dispatchEvent(new CustomEvent("blobs-updated",{detail:e.detail}))}),this.blobManager.addEventListener("blob-data-requested",e=>{const{id:t}=e.detail;this.connection.send({type:"GetMediaBlobData",data:{id:t}})}),this.blobManager.addEventListener("blob-data-cached",e=>{this.log("debug",`Blob data cached: ${e.detail.id}`),this.dispatchEvent(new CustomEvent("blob-data-cached",{detail:e.detail}))}),this.uploadHandler.addEventListener("upload-started",e=>{const{file:t}=e.detail;this.log("info",`Upload started: ${t.name}`),this.dispatchEvent(new CustomEvent("upload-started",{detail:e.detail}))}),this.uploadHandler.addEventListener("upload-completed",e=>{const{file:t,blob:n}=e.detail;this.log("info",`Upload completed: ${t.name}`),this.connection.send({type:"UploadMediaBlob",data:{blob:n}}),this.dispatchEvent(new CustomEvent("upload-completed",{detail:e.detail}))}),this.uploadHandler.addEventListener("upload-error",e=>{const{file:t,error:n}=e.detail;this.log("error",`Upload failed: ${t.name}`,{error:n}),this.dispatchEvent(new CustomEvent("upload-error",{detail:e.detail}))})}handleServerMessage(e){switch(e.type){case"MediaBlobs":const t=e.data;this.log("info",`Received ${t?.blobs?.length||0} media blobs`),this.blobManager.updateBlobs(t?.blobs||[]);break;case"MediaBlob":const n=e.data?.blob;this.log("info",`Received single media blob: ${n?.id}`);break;case"MediaBlobData":const s=e.data;this.log("debug",`Received blob data: ${s?.id}`),this.blobManager.cacheBlobData(s);break;case"Error":const i=e.data?.message||"Server error";this.log("error",`Server error: ${i}`),this.dispatchEvent(new CustomEvent("server-error",{detail:{error:i}}));break;default:this.log("debug",`Unknown message type: ${e.type}`)}this.dispatchEvent(new CustomEvent("message",{detail:{message:e}}))}log(e,t,n){if(!this.shouldLog(e))return;const s={type:e,timestamp:Date.now(),data:{message:t,data:n}};this.eventLog.push(s),this.eventLog.length>100&&(this.eventLog=this.eventLog.slice(-100)),this.dispatchEvent(new CustomEvent("log",{detail:s}));const i=new Date().toLocaleTimeString(),a=n?`[${i}] [WebSocketDemo] ${t}: ${JSON.stringify(n,null,2)}`:`[${i}] [WebSocketDemo] ${t}`;switch(e){case"error":console.error(a);break;case"warn":console.warn(a);break;case"debug":console.debug(a);break;default:console.log(a)}}shouldLog(e){const t=["none","error","warn","info","debug"],n=t.indexOf(this.options.logLevel||"info");return t.indexOf(e)<=n}destroy(){this.log("info","Destroying WebSocket demo client"),this.connection.destroy(),this.blobManager.destroy(),this.uploadHandler.destroy(),this.eventLog=[],["status-change","blobs-updated","blob-data-cached","upload-started","upload-completed","upload-error","connection-error","server-error","message","log","log-cleared","pong"].forEach(t=>{(this._listeners?.[t]||[]).forEach(s=>{this.removeEventListener(t,s)})})}}var Me=w("<div class=blob-list>"),Ue=w("<div>No log entries yet..."),Ae=w("<div class=demo-section><h2 class=section-title>Debug Log</h2><div class=controls><button>Clear Log</button></div><div class=log-container>"),Fe=w(`<div><style>
        .demo-section { margin-bottom: 2rem; }
        .controls { display: flex; gap: 0.75rem; margin-bottom: 1rem; flex-wrap: wrap; align-items: center; }
        button {
          padding: 0.5rem 1rem;
          border: 1px solid #ccc;
          background: white;
          cursor: pointer;
          border-radius: 4px;
          font-size: 0.875rem;
          font-weight: 500;
        }
        button:hover:not(:disabled) { background: #f0f0f0; }
        button:disabled { opacity: 0.5; cursor: not-allowed; }
        button.primary { background: #3b82f6; color: white; border-color: #3b82f6; }
        button.primary:hover:not(:disabled) { background: #2563eb; }
        input[type="text"] {
          padding: 0.5rem;
          border: 1px solid #ccc;
          border-radius: 4px;
          min-width: 300px;
          font-size: 0.875rem;
        }
        .status-indicator {
          display: inline-block;
          width: 12px;
          height: 12px;
          border-radius: 50%;
          margin-right: 0.5rem;
        }
        .log-container {
          background: #f8f9fa;
          border: 1px solid #e9ecef;
          border-radius: 4px;
          padding: 1rem;
          max-height: 300px;
          overflow-y: auto;
          font-family: monospace;
          font-size: 0.875rem;
          white-space: pre-wrap;
        }
        .blob-list { display: grid; gap: 1rem; }
        .blob-item {
          border: 1px solid #e5e7eb;
          border-radius: 8px;
          padding: 1rem;
          background: white;
        }
        .blob-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 0.5rem;
        }
        .blob-actions { display: flex; gap: 0.5rem; margin-top: 0.5rem; }
        .blob-actions button {
          font-size: 0.75rem;
          padding: 0.25rem 0.5rem;
          font-weight: normal;
        }
        .section-title {
          margin: 0 0 1rem 0;
          color: #374151;
          font-weight: 600;
        }
        .empty-state {
          text-align: center;
          padding: 2rem;
          color: #6b7280;
          font-style: italic;
        }
      </style><h1>WebSocket Demo (Modular Components)</h1><div class=demo-section><h2 class=section-title>Connection</h2><div class=controls><input type=text placeholder="WebSocket URL"><button class=primary>Connect</button><button>Disconnect</button></div><div><span class=status-indicator></span>Status: </div></div><div class=demo-section><h2 class=section-title>Actions</h2><div class=controls><button>Ping</button><button>Get Media Blobs</button><button>Upload Files</button><button>Clear Log</button><input type=file multiple></div></div><div class=demo-section><h2 class=section-title>Media Blobs (<!>)`),Te=w("<div class=empty-state>No media blobs yet. Upload a file or get blobs from server."),ze=w("<div class=blob-item><div class=blob-header><div><strong></strong><br><small> • </small></div><div></div></div><div><small>Path: <br>Created: </small></div><div class=blob-actions><button>Download</button><button>View</button><button>Load Data"),Pe=w("<div>");const He=m=>{const[e,t]=$(null),[n,s]=$("disconnected"),[i,a]=$(0),[_,ne]=$([]),[R,O]=$([]),[I,se]=$(m.websocketUrl||"ws://localhost:8080/ws");let D;Se(()=>{const r=new De(I(),{logLevel:"info",autoGetMediaBlobs:!0});r.addEventListener("status-change",c=>{const{status:u,userCount:v}=c.detail;s(u),a(v||0)}),r.addEventListener("blobs-updated",c=>{ne(c.detail.blobs)}),r.addEventListener("log",c=>{const{message:u,data:v}=c.detail.data,M=v?`${u}: ${JSON.stringify(v)}`:u;O(S=>[...S.slice(-49),M])}),t(r),m.autoConnect&&r.connect().catch(console.error),ke(()=>{r.destroy()})});const ie=()=>{e()?.connect().catch(console.error)},oe=()=>{e()?.disconnect()},ae=()=>{e()?.ping()},re=()=>{e()?.getMediaBlobs()},le=r=>{const c=r.target,u=c.files;u&&u.length>0&&(e()?.uploadFiles(u),c.value="")},de=()=>{D?.click()},ce=(r,c)=>{e()?.downloadBlob(r,c)},he=r=>{e()?.viewBlob(r)},ue=r=>{e()?.loadBlobData(r)},W=()=>{O([]),e()?.clearEventLog()},ge=()=>{switch(n()){case"connected":return"#10b981";case"connecting":return"#f59e0b";case"error":return"#ef4444";default:return"#6b7280"}};return(()=>{var r=Fe(),c=r.firstChild,u=c.nextSibling,v=u.nextSibling,M=v.firstChild,S=M.nextSibling,k=S.firstChild,U=k.nextSibling,N=U.nextSibling,L=S.nextSibling,A=L.firstChild;A.nextSibling;var G=v.nextSibling,pe=G.firstChild,be=pe.nextSibling,F=be.firstChild,T=F.nextSibling,z=T.nextSibling,j=z.nextSibling,C=j.nextSibling,q=G.nextSibling,J=q.firstChild,me=J.firstChild,V=me.nextSibling;V.nextSibling,r.style.setProperty("padding","1rem"),r.style.setProperty("font-family","sans-serif"),k.$$input=o=>se(o.target.value),U.$$click=ie,N.$$click=oe,L.style.setProperty("margin-bottom","1rem"),l(L,n,null),l(L,E(B,{get when(){return i()>0},get children(){return[" ","(",ee(()=>i())," user",ee(()=>i()!==1?"s":"")," online)"]}}),null),F.$$click=ae,T.$$click=re,z.$$click=de,j.$$click=W,C.addEventListener("change",le);var K=D;return typeof K=="function"?Le(K,C):D=C,C.style.setProperty("display","none"),l(J,()=>_().length,V),l(q,E(B,{get when(){return _().length>0},get fallback(){return Te()},get children(){var o=Me();return l(o,E(te,{get each(){return _()},children:d=>{const g=()=>e()?.getBlobDisplayInfo(d);return(()=>{var f=ze(),p=f.firstChild,h=p.firstChild,b=h.firstChild,x=b.nextSibling,y=x.nextSibling,ve=y.firstChild,fe=h.nextSibling,Q=p.nextSibling,P=Q.firstChild,we=P.firstChild,X=we.nextSibling;X.nextSibling;var ye=Q.nextSibling,Y=ye.firstChild,Z=Y.nextSibling,$e=Z.nextSibling;return l(b,()=>d.id),l(y,()=>g()?.mime,ve),l(y,()=>g()?.size,null),l(P,()=>d.local_path||"None",X),l(P,()=>new Date(d.created_at).toLocaleString(),null),Y.$$click=()=>ce(d.id,d.local_path),Z.$$click=()=>he(d.id),$e.$$click=()=>ue(d.id),H(()=>fe.innerHTML=g()?.thumbnailHtml),f})()}})),o}}),null),l(r,E(B,{get when(){return m.showDebugLog},get children(){var o=Ae(),d=o.firstChild,g=d.nextSibling,f=g.firstChild,p=g.nextSibling;return f.$$click=W,l(p,E(te,{get each(){return R()},children:h=>(()=>{var b=Pe();return l(b,h),b})()}),null),l(p,E(B,{get when(){return R().length===0},get children(){var h=Ue();return h.style.setProperty("color","#6b7280"),h.style.setProperty("font-style","italic"),h}}),null),o}}),null),H(o=>{var d=n()==="connected"||n()==="connecting",g=n()==="connected"||n()==="connecting",f=n()==="disconnected",p=ge(),h=n()!=="connected",b=n()!=="connected",x=n()!=="connected",y=n()!=="connected";return d!==o.e&&(k.disabled=o.e=d),g!==o.t&&(U.disabled=o.t=g),f!==o.a&&(N.disabled=o.a=f),p!==o.o&&((o.o=p)!=null?A.style.setProperty("background-color",p):A.style.removeProperty("background-color")),h!==o.i&&(F.disabled=o.i=h),b!==o.n&&(T.disabled=o.n=b),x!==o.s&&(z.disabled=o.s=x),y!==o.h&&(C.disabled=o.h=y),o},{e:void 0,t:void 0,a:void 0,o:void 0,i:void 0,n:void 0,s:void 0,h:void 0}),H(()=>k.value=I()),r})()};Ee("websocket-demo",{websocketUrl:"ws://localhost:8080/ws",autoConnect:!1,showDebugLog:!0},He);Ce(["input","click"]);
//# sourceMappingURL=websocket-demo.js.map
