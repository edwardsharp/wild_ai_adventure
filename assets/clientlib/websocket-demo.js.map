{"version":3,"file":"websocket-demo.js","sources":["../src/lib/websocket-connection.ts","../src/lib/media-blob-manager.ts","../src/lib/file-upload.ts","../src/lib/websocket-demo-client.ts","../src/web-components/websocket-demo.tsx"],"sourcesContent":["/**\n * WebSocket Connection Manager\n *\n * Provides a clean, event-driven interface for WebSocket connections\n * with automatic reconnection, status tracking, and message handling.\n */\n\nexport type ConnectionStatus = 'disconnected' | 'connecting' | 'connected' | 'error';\n\nexport interface ConnectionStatusEvent {\n  status: ConnectionStatus;\n  userCount?: number;\n  connectionId?: string;\n  timestamp: number;\n}\n\nexport interface WebSocketConnectionOptions {\n  url: string;\n  autoReconnect?: boolean;\n  reconnectDelay?: number;\n  maxReconnectAttempts?: number;\n  pingInterval?: number;\n}\n\nexport interface WebSocketMessage {\n  type: string;\n  data?: any;\n}\n\nexport class WebSocketConnection extends EventTarget {\n  private socket: WebSocket | null = null;\n  private status: ConnectionStatus = 'disconnected';\n  private options: Required<WebSocketConnectionOptions>;\n  private reconnectAttempts = 0;\n  private reconnectTimer?: number;\n  private pingTimer?: number;\n  private connectionId = '';\n  private userCount = 0;\n\n  constructor(options: WebSocketConnectionOptions) {\n    super();\n\n    this.options = {\n      autoReconnect: true,\n      reconnectDelay: 3000,\n      maxReconnectAttempts: 5,\n      pingInterval: 30000,\n      ...options,\n    };\n  }\n\n  /**\n   * Connect to the WebSocket server\n   */\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.socket?.readyState === WebSocket.OPEN) {\n        resolve();\n        return;\n      }\n\n      this.setStatus('connecting');\n\n      try {\n        this.socket = new WebSocket(this.options.url);\n        this.setupSocketListeners(resolve, reject);\n      } catch (error) {\n        this.setStatus('error');\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Disconnect from the WebSocket server\n   */\n  disconnect(): void {\n    this.clearTimers();\n    this.options.autoReconnect = false; // Disable auto-reconnect for manual disconnect\n\n    if (this.socket) {\n      this.socket.close(1000, 'Manual disconnect');\n    }\n  }\n\n  /**\n   * Send a message to the server\n   */\n  send(message: WebSocketMessage): boolean {\n    if (!this.isConnected()) {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: { error: 'Cannot send message: not connected' }\n      }));\n      return false;\n    }\n\n    try {\n      const json = JSON.stringify(message);\n      this.socket!.send(json);\n\n      this.dispatchEvent(new CustomEvent('message-sent', {\n        detail: { message }\n      }));\n\n      return true;\n    } catch (error) {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: { error: `Send error: ${error}` }\n      }));\n      return false;\n    }\n  }\n\n  /**\n   * Send a ping message\n   */\n  ping(): void {\n    this.send({ type: 'Ping' });\n  }\n\n  /**\n   * Check if currently connected\n   */\n  isConnected(): boolean {\n    return this.socket?.readyState === WebSocket.OPEN;\n  }\n\n  /**\n   * Get current connection status\n   */\n  getStatus(): ConnectionStatus {\n    return this.status;\n  }\n\n  /**\n   * Get current user count\n   */\n  getUserCount(): number {\n    return this.userCount;\n  }\n\n  /**\n   * Get connection ID\n   */\n  getConnectionId(): string {\n    return this.connectionId;\n  }\n\n  private setStatus(status: ConnectionStatus): void {\n    if (this.status === status) return;\n\n    this.status = status;\n\n    const event: ConnectionStatusEvent = {\n      status,\n      userCount: this.userCount,\n      connectionId: this.connectionId,\n      timestamp: Date.now(),\n    };\n\n    this.dispatchEvent(new CustomEvent('status-change', {\n      detail: event\n    }));\n  }\n\n  private setupSocketListeners(resolve: () => void, reject: (error: any) => void): void {\n    if (!this.socket) return;\n\n    this.socket.onopen = () => {\n      this.setStatus('connected');\n      this.reconnectAttempts = 0;\n      this.setupPingTimer();\n      resolve();\n    };\n\n    this.socket.onclose = (event) => {\n      this.clearTimers();\n      this.setStatus('disconnected');\n      this.socket = null;\n\n      this.dispatchEvent(new CustomEvent('connection-closed', {\n        detail: { code: event.code, reason: event.reason }\n      }));\n\n      // Attempt reconnection if enabled\n      if (this.options.autoReconnect && this.reconnectAttempts < this.options.maxReconnectAttempts) {\n        this.scheduleReconnect();\n      }\n    };\n\n    this.socket.onerror = (error) => {\n      this.setStatus('error');\n\n      this.dispatchEvent(new CustomEvent('connection-error', {\n        detail: { error }\n      }));\n\n      if (this.reconnectAttempts === 0) {\n        reject(error);\n      }\n    };\n\n    this.socket.onmessage = (event) => {\n      this.handleMessage(event.data);\n    };\n  }\n\n  private handleMessage(rawMessage: string): void {\n    try {\n      const response: WebSocketMessage = JSON.parse(rawMessage);\n\n      // Handle built-in message types\n      switch (response.type) {\n        case 'Welcome':\n          this.connectionId = response.data?.connection_id || '';\n          break;\n\n        case 'ConnectionStatus':\n          this.userCount = response.data?.user_count || 0;\n          // Re-emit status change with updated user count\n          this.setStatus(this.status);\n          break;\n\n        case 'Pong':\n          this.dispatchEvent(new CustomEvent('pong', {\n            detail: { timestamp: Date.now() }\n          }));\n          break;\n\n        case 'Error':\n          this.dispatchEvent(new CustomEvent('server-error', {\n            detail: { error: response.data?.message || 'Server error' }\n          }));\n          break;\n      }\n\n      // Always emit the raw message for custom handling\n      this.dispatchEvent(new CustomEvent('message', {\n        detail: { message: response, raw: rawMessage }\n      }));\n\n    } catch (error) {\n      this.dispatchEvent(new CustomEvent('parse-error', {\n        detail: { error, rawMessage, messageLength: rawMessage.length }\n      }));\n    }\n  }\n\n  private scheduleReconnect(): void {\n    this.reconnectAttempts++;\n\n    this.dispatchEvent(new CustomEvent('reconnecting', {\n      detail: {\n        attempt: this.reconnectAttempts,\n        maxAttempts: this.options.maxReconnectAttempts,\n        delay: this.options.reconnectDelay\n      }\n    }));\n\n    this.reconnectTimer = window.setTimeout(() => {\n      this.connect().catch(() => {\n        // Connection will be retried automatically if still under max attempts\n      });\n    }, this.options.reconnectDelay);\n  }\n\n  private setupPingTimer(): void {\n    if (this.options.pingInterval > 0) {\n      this.pingTimer = window.setInterval(() => {\n        if (this.isConnected()) {\n          this.ping();\n        }\n      }, this.options.pingInterval);\n    }\n  }\n\n  private clearTimers(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = undefined;\n    }\n\n    if (this.pingTimer) {\n      clearInterval(this.pingTimer);\n      this.pingTimer = undefined;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.disconnect();\n    this.clearTimers();\n    this.removeAllListeners();\n  }\n\n  private removeAllListeners(): void {\n    const events = ['status-change', 'message', 'connection-closed', 'connection-error', 'message-sent', 'error', 'pong', 'server-error', 'parse-error', 'reconnecting'];\n    events.forEach(event => {\n      // Remove all listeners for each event type\n      const listeners = (this as any)._listeners?.[event] || [];\n      listeners.forEach((listener: any) => {\n        this.removeEventListener(event, listener);\n      });\n    });\n  }\n}\n","/**\n * Media Blob Manager\n *\n * Handles media blob data management, caching, thumbnail generation,\n * and display formatting for WebSocket-received media blobs.\n */\n\nexport interface MediaBlob {\n  id: string;\n  data?: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id?: string;\n  local_path?: string;\n  metadata?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface MediaBlobData {\n  id: string;\n  data: number[];\n  mime: string;\n  size: number;\n}\n\nexport interface BlobDisplayInfo {\n  id: string;\n  mime: string;\n  size: string;\n  sha256: string;\n  clientId: string;\n  path: string;\n  createdAt: string;\n  metadata: string;\n  thumbnailHtml: string;\n}\n\nexport class MediaBlobManager extends EventTarget {\n  private blobs: MediaBlob[] = [];\n  private blobDataCache = new Map<string, string>(); // blob ID -> data URL\n  private loadingBlobs = new Set<string>();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Update the list of media blobs\n   */\n  updateBlobs(blobs: MediaBlob[]): void {\n    this.blobs = [...blobs];\n\n    this.dispatchEvent(new CustomEvent('blobs-updated', {\n      detail: { blobs: this.blobs, count: this.blobs.length }\n    }));\n  }\n\n  /**\n   * Get all blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return [...this.blobs];\n  }\n\n  /**\n   * Get a specific blob by ID\n   */\n  getBlob(id: string): MediaBlob | undefined {\n    return this.blobs.find(blob => blob.id === id);\n  }\n\n  /**\n   * Add blob data to cache\n   */\n  cacheBlobData(blobData: MediaBlobData): void {\n    if (!blobData.id || !blobData.data) return;\n\n    // Convert data array to Uint8Array and create blob\n    const uint8Array = new Uint8Array(blobData.data);\n    const blob = new Blob([uint8Array], {\n      type: blobData.mime || 'application/octet-stream',\n    });\n    const dataUrl = URL.createObjectURL(blob);\n\n    // Cache the data URL\n    this.blobDataCache.set(blobData.id, dataUrl);\n    this.loadingBlobs.delete(blobData.id);\n\n    this.dispatchEvent(new CustomEvent('blob-data-cached', {\n      detail: { id: blobData.id, dataUrl, mime: blobData.mime }\n    }));\n  }\n\n  /**\n   * Check if blob data is cached\n   */\n  isCached(blobId: string): boolean {\n    return this.blobDataCache.has(blobId);\n  }\n\n  /**\n   * Get cached data URL for a blob\n   */\n  getCachedDataUrl(blobId: string): string | undefined {\n    return this.blobDataCache.get(blobId);\n  }\n\n  /**\n   * Check if blob is currently loading\n   */\n  isLoading(blobId: string): boolean {\n    return this.loadingBlobs.has(blobId);\n  }\n\n  /**\n   * Mark blob as loading\n   */\n  markAsLoading(blobId: string): void {\n    this.loadingBlobs.add(blobId);\n  }\n\n  /**\n   * Request blob data (emits event for external handler)\n   */\n  requestBlobData(blobId: string): void {\n    if (this.isCached(blobId) || this.isLoading(blobId)) {\n      return;\n    }\n\n    this.markAsLoading(blobId);\n\n    this.dispatchEvent(new CustomEvent('blob-data-requested', {\n      detail: { id: blobId }\n    }));\n  }\n\n  /**\n   * Generate display information for a blob\n   */\n  getBlobDisplayInfo(blob: MediaBlob): BlobDisplayInfo {\n    return {\n      id: blob.id,\n      mime: blob.mime || 'Unknown type',\n      size: this.formatFileSize(blob.size),\n      sha256: blob.sha256,\n      clientId: blob.source_client_id || 'Unknown',\n      path: blob.local_path || 'None',\n      createdAt: new Date(blob.created_at).toLocaleString(),\n      metadata: Object.keys(blob.metadata || {}).length > 0\n        ? JSON.stringify(blob.metadata)\n        : '',\n      thumbnailHtml: this.generateThumbnailHtml(blob),\n    };\n  }\n\n  /**\n   * Generate thumbnail HTML for a blob\n   */\n  generateThumbnailHtml(blob: MediaBlob): string {\n    const mime = blob.mime || '';\n    const cachedData = this.getCachedDataUrl(blob.id);\n    const isLoading = this.isLoading(blob.id);\n\n    const baseStyle = 'width: 80px; height: 80px; border-radius: 4px; object-fit: cover;';\n    const placeholderStyle = 'display: flex; align-items: center; justify-content: center; background: #f0f0f0; font-size: 0.7em; border-radius: 4px; cursor: pointer;';\n\n    if (mime.startsWith('image/')) {\n      if (cachedData) {\n        return `<img src=\"${cachedData}\" alt=\"Thumbnail\" style=\"${baseStyle}\" loading=\"lazy\">`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" data-blob-id=\"${blob.id}\">LOAD IMAGE</div>`;\n      }\n    } else if (mime.startsWith('video/')) {\n      if (cachedData) {\n        return `<video style=\"${baseStyle}\" controls muted><source src=\"${cachedData}\" type=\"${mime}\"></video>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" data-blob-id=\"${blob.id}\">LOAD VIDEO</div>`;\n      }\n    } else if (mime.startsWith('audio/')) {\n      if (cachedData) {\n        return `<audio style=\"${baseStyle}\" controls><source src=\"${cachedData}\" type=\"${mime}\"></audio>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" data-blob-id=\"${blob.id}\">LOAD AUDIO</div>`;\n      }\n    } else if (mime === 'application/pdf') {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">PDF</div>`;\n    } else {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">FILE</div>`;\n    }\n  }\n\n  /**\n   * Download a cached blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    const blob = this.getBlob(blobId);\n    const downloadName = filename || blob?.local_path || `blob-${blobId}`;\n\n    // Create download link\n    const a = document.createElement('a');\n    a.href = cachedData;\n    a.download = downloadName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    this.dispatchEvent(new CustomEvent('blob-downloaded', {\n      detail: { id: blobId, filename: downloadName }\n    }));\n\n    return true;\n  }\n\n  /**\n   * View a cached blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    window.open(cachedData, '_blank');\n\n    this.dispatchEvent(new CustomEvent('blob-viewed', {\n      detail: { id: blobId }\n    }));\n\n    return true;\n  }\n\n  /**\n   * Format file size in human-readable format\n   */\n  formatFileSize(bytes: number): string {\n    if (!bytes) return 'Unknown size';\n\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  clearCache(): void {\n    // Revoke all object URLs to free memory\n    for (const dataUrl of this.blobDataCache.values()) {\n      URL.revokeObjectURL(dataUrl);\n    }\n\n    this.blobDataCache.clear();\n    this.loadingBlobs.clear();\n\n    this.dispatchEvent(new CustomEvent('cache-cleared', {\n      detail: { timestamp: Date.now() }\n    }));\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): { cachedCount: number; loadingCount: number; totalBlobs: number } {\n    return {\n      cachedCount: this.blobDataCache.size,\n      loadingCount: this.loadingBlobs.size,\n      totalBlobs: this.blobs.length,\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.clearCache();\n    this.blobs = [];\n\n    // Remove all event listeners\n    const events = ['blobs-updated', 'blob-data-cached', 'blob-data-requested', 'blob-downloaded', 'blob-viewed', 'cache-cleared'];\n    events.forEach(event => {\n      const listeners = (this as any)._listeners?.[event] || [];\n      listeners.forEach((listener: any) => {\n        this.removeEventListener(event, listener);\n      });\n    });\n  }\n}\n","/**\n * File Upload Handler\n *\n * Handles file upload processing, validation, SHA256 calculation,\n * and conversion to the blob format expected by the WebSocket server.\n */\n\nexport interface UploadFile {\n  file: File;\n  id: string;\n  progress: number;\n  status: 'pending' | 'processing' | 'uploading' | 'completed' | 'error';\n  error?: string;\n}\n\nexport interface ProcessedBlob {\n  id: string;\n  data: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id: string;\n  local_path: string;\n  metadata: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface FileUploadOptions {\n  maxFileSize?: number; // in bytes, default 10MB\n  allowedMimeTypes?: string[]; // if provided, only these types are allowed\n  clientId?: string;\n  chunkSize?: number; // for future chunked uploads\n}\n\nexport class FileUploadHandler extends EventTarget {\n  private uploads = new Map<string, UploadFile>();\n  private options: Required<FileUploadOptions>;\n\n  constructor(options: FileUploadOptions = {}) {\n    super();\n\n    this.options = {\n      maxFileSize: 10 * 1024 * 1024, // 10MB default\n      allowedMimeTypes: [],\n      clientId: 'web-client',\n      chunkSize: 64 * 1024, // 64KB chunks for future use\n      ...options,\n    };\n  }\n\n  /**\n   * Add files for upload processing\n   */\n  async addFiles(files: FileList | File[]): Promise<string[]> {\n    const fileArray = Array.from(files);\n    const uploadIds: string[] = [];\n\n    for (const file of fileArray) {\n      const uploadId = crypto.randomUUID();\n      uploadIds.push(uploadId);\n\n      const upload: UploadFile = {\n        file,\n        id: uploadId,\n        progress: 0,\n        status: 'pending',\n      };\n\n      this.uploads.set(uploadId, upload);\n\n      // Start processing immediately\n      this.processFile(uploadId);\n    }\n\n    return uploadIds;\n  }\n\n  /**\n   * Get upload status\n   */\n  getUpload(uploadId: string): UploadFile | undefined {\n    return this.uploads.get(uploadId);\n  }\n\n  /**\n   * Get all uploads\n   */\n  getAllUploads(): UploadFile[] {\n    return Array.from(this.uploads.values());\n  }\n\n  /**\n   * Remove completed or failed uploads\n   */\n  clearCompleted(): void {\n    for (const [id, upload] of this.uploads.entries()) {\n      if (upload.status === 'completed' || upload.status === 'error') {\n        this.uploads.delete(id);\n      }\n    }\n\n    this.dispatchEvent(new CustomEvent('uploads-cleared', {\n      detail: { timestamp: Date.now() }\n    }));\n  }\n\n  /**\n   * Cancel an upload\n   */\n  cancelUpload(uploadId: string): void {\n    const upload = this.uploads.get(uploadId);\n    if (upload && upload.status !== 'completed') {\n      upload.status = 'error';\n      upload.error = 'Cancelled by user';\n\n      this.dispatchEvent(new CustomEvent('upload-cancelled', {\n        detail: { uploadId, file: upload.file }\n      }));\n    }\n  }\n\n  private async processFile(uploadId: string): Promise<void> {\n    const upload = this.uploads.get(uploadId);\n    if (!upload) return;\n\n    try {\n      upload.status = 'processing';\n      upload.progress = 0;\n\n      this.dispatchEvent(new CustomEvent('upload-started', {\n        detail: { uploadId, file: upload.file }\n      }));\n\n      // Validate file\n      this.validateFile(upload.file);\n      upload.progress = 10;\n\n      // Read file data\n      const arrayBuffer = await this.readFile(upload.file);\n      upload.progress = 30;\n\n      // Calculate SHA256\n      const sha256 = await this.calculateSHA256(arrayBuffer);\n      upload.progress = 60;\n\n      // Convert to processed blob format\n      const processedBlob = this.createProcessedBlob(upload.file, arrayBuffer, sha256);\n      upload.progress = 90;\n\n      upload.status = 'uploading';\n      upload.progress = 100;\n\n      this.dispatchEvent(new CustomEvent('upload-processed', {\n        detail: { uploadId, file: upload.file, blob: processedBlob }\n      }));\n\n      // Mark as completed (actual upload handled externally)\n      upload.status = 'completed';\n\n      this.dispatchEvent(new CustomEvent('upload-completed', {\n        detail: { uploadId, file: upload.file, blob: processedBlob }\n      }));\n\n    } catch (error) {\n      upload.status = 'error';\n      upload.error = error instanceof Error ? error.message : String(error);\n\n      this.dispatchEvent(new CustomEvent('upload-error', {\n        detail: { uploadId, file: upload.file, error: upload.error }\n      }));\n    }\n  }\n\n  private validateFile(file: File): void {\n    // Check file size\n    if (file.size > this.options.maxFileSize) {\n      throw new Error(\n        `File \"${file.name}\" is too large (${this.formatFileSize(file.size)}). Maximum size is ${this.formatFileSize(this.options.maxFileSize)}.`\n      );\n    }\n\n    // Check MIME type if restrictions are set\n    if (this.options.allowedMimeTypes.length > 0) {\n      const mimeType = file.type || 'application/octet-stream';\n      if (!this.options.allowedMimeTypes.includes(mimeType)) {\n        throw new Error(\n          `File type \"${mimeType}\" is not allowed. Allowed types: ${this.options.allowedMimeTypes.join(', ')}`\n        );\n      }\n    }\n\n    // Check for empty file\n    if (file.size === 0) {\n      throw new Error(`File \"${file.name}\" is empty.`);\n    }\n  }\n\n  private readFile(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.result instanceof ArrayBuffer) {\n          resolve(reader.result);\n        } else {\n          reject(new Error('Failed to read file as ArrayBuffer'));\n        }\n      };\n\n      reader.onerror = () => {\n        reject(new Error(`Failed to read file: ${reader.error?.message || 'Unknown error'}`));\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  private async calculateSHA256(arrayBuffer: ArrayBuffer): Promise<string> {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  private createProcessedBlob(file: File, arrayBuffer: ArrayBuffer, sha256: string): ProcessedBlob {\n    const data = Array.from(new Uint8Array(arrayBuffer));\n    const now = new Date().toISOString();\n\n    return {\n      id: crypto.randomUUID(),\n      data,\n      sha256,\n      size: file.size,\n      mime: file.type || 'application/octet-stream',\n      source_client_id: this.options.clientId,\n      local_path: file.name,\n      metadata: {\n        originalName: file.name,\n        lastModified: file.lastModified,\n        uploadedAt: now,\n        userAgent: navigator.userAgent,\n      },\n      created_at: now,\n      updated_at: now,\n    };\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (!bytes) return 'Unknown size';\n\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getStats(): {\n    total: number;\n    pending: number;\n    processing: number;\n    uploading: number;\n    completed: number;\n    errors: number;\n  } {\n    const uploads = Array.from(this.uploads.values());\n\n    return {\n      total: uploads.length,\n      pending: uploads.filter(u => u.status === 'pending').length,\n      processing: uploads.filter(u => u.status === 'processing').length,\n      uploading: uploads.filter(u => u.status === 'uploading').length,\n      completed: uploads.filter(u => u.status === 'completed').length,\n      errors: uploads.filter(u => u.status === 'error').length,\n    };\n  }\n\n  /**\n   * Update options\n   */\n  updateOptions(options: Partial<FileUploadOptions>): void {\n    this.options = { ...this.options, ...options };\n\n    this.dispatchEvent(new CustomEvent('options-updated', {\n      detail: { options: this.options }\n    }));\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.uploads.clear();\n\n    // Remove all event listeners\n    const events = ['upload-started', 'upload-processed', 'upload-completed', 'upload-error', 'upload-cancelled', 'uploads-cleared', 'options-updated'];\n    events.forEach(event => {\n      const listeners = (this as any)._listeners?.[event] || [];\n      listeners.forEach((listener: any) => {\n        this.removeEventListener(event, listener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket Demo Client\n *\n * A unified client that orchestrates WebSocket connection, media blob management,\n * and file uploads. This provides a high-level interface that combines all the\n * modular components into a cohesive demo client.\n */\n\nimport {\n  WebSocketConnection,\n  ConnectionStatus,\n  type WebSocketConnectionOptions,\n} from './websocket-connection.js';\nimport {\n  MediaBlobManager,\n  type MediaBlob,\n  type MediaBlobData,\n} from './media-blob-manager.js';\nimport { FileUploadHandler, type FileUploadOptions } from './file-upload.js';\n\nexport interface WebSocketDemoClientOptions {\n  websocket?: WebSocketConnectionOptions;\n  fileUpload?: FileUploadOptions;\n  autoGetMediaBlobs?: boolean;\n  logLevel?: 'none' | 'error' | 'warn' | 'info' | 'debug';\n}\n\nexport interface DemoClientEvent {\n  type: string;\n  timestamp: number;\n  data?: any;\n}\n\nexport class WebSocketDemoClient extends EventTarget {\n  private connection: WebSocketConnection;\n  private blobManager: MediaBlobManager;\n  private uploadHandler: FileUploadHandler;\n  private eventLog: DemoClientEvent[] = [];\n  private options: WebSocketDemoClientOptions;\n\n  constructor(websocketUrl: string, options: WebSocketDemoClientOptions = {}) {\n    super();\n\n    this.options = {\n      autoGetMediaBlobs: true,\n      logLevel: 'info',\n      ...options,\n    };\n\n    // Initialize components\n    this.connection = new WebSocketConnection({\n      url: websocketUrl,\n      ...this.options.websocket,\n    });\n\n    this.blobManager = new MediaBlobManager();\n\n    this.uploadHandler = new FileUploadHandler({\n      clientId: 'demo-client',\n      ...this.options.fileUpload,\n    });\n\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    this.log('info', 'Connecting to WebSocket server');\n    return this.connection.connect();\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  disconnect(): void {\n    this.log('info', 'Disconnecting from WebSocket server');\n    this.connection.disconnect();\n  }\n\n  /**\n   * Send a ping message\n   */\n  ping(): void {\n    this.log('debug', 'Sending ping');\n    this.connection.ping();\n  }\n\n  /**\n   * Request media blobs from server\n   */\n  getMediaBlobs(limit = 10, offset = 0): void {\n    this.log(\n      'debug',\n      `Requesting media blobs (limit: ${limit}, offset: ${offset})`\n    );\n    this.connection.send({\n      type: 'GetMediaBlobs',\n      data: { limit, offset },\n    });\n  }\n\n  /**\n   * Upload files\n   */\n  async uploadFiles(files: FileList | File[]): Promise<string[]> {\n    this.log('info', `Starting upload of ${files.length} file(s)`);\n    return this.uploadHandler.addFiles(files);\n  }\n\n  /**\n   * Download a media blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    this.log('debug', `Downloading blob: ${blobId}`);\n    return this.blobManager.downloadBlob(blobId, filename);\n  }\n\n  /**\n   * View a media blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    this.log('debug', `Viewing blob: ${blobId}`);\n    return this.blobManager.viewBlob(blobId);\n  }\n\n  /**\n   * Load blob data from server\n   */\n  loadBlobData(blobId: string): void {\n    this.log('debug', `Loading blob data: ${blobId}`);\n    this.blobManager.requestBlobData(blobId);\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionStatus(): ConnectionStatus {\n    return this.connection.getStatus();\n  }\n\n  /**\n   * Check if connected\n   */\n  isConnected(): boolean {\n    return this.connection.isConnected();\n  }\n\n  /**\n   * Get current user count\n   */\n  getUserCount(): number {\n    return this.connection.getUserCount();\n  }\n\n  /**\n   * Get connection ID\n   */\n  getConnectionId(): string {\n    return this.connection.getConnectionId();\n  }\n\n  /**\n   * Get all media blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return this.blobManager.getBlobs();\n  }\n\n  /**\n   * Get blob display info\n   */\n  getBlobDisplayInfo(blob: MediaBlob) {\n    return this.blobManager.getBlobDisplayInfo(blob);\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getUploadStats() {\n    return this.uploadHandler.getStats();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return this.blobManager.getCacheStats();\n  }\n\n  /**\n   * Clear completed uploads\n   */\n  clearCompletedUploads(): void {\n    this.uploadHandler.clearCompleted();\n  }\n\n  /**\n   * Clear blob cache\n   */\n  clearBlobCache(): void {\n    this.blobManager.clearCache();\n  }\n\n  /**\n   * Get event log\n   */\n  getEventLog(): DemoClientEvent[] {\n    return [...this.eventLog];\n  }\n\n  /**\n   * Clear event log\n   */\n  clearEventLog(): void {\n    this.eventLog = [];\n    this.dispatchEvent(\n      new CustomEvent('log-cleared', {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  private setupEventHandlers(): void {\n    // WebSocket connection events\n    this.connection.addEventListener('status-change', (e: any) => {\n      const { status, userCount, connectionId } = e.detail;\n      this.log('info', `Connection status changed: ${status}`, {\n        userCount,\n        connectionId,\n      });\n\n      this.dispatchEvent(\n        new CustomEvent('status-change', { detail: e.detail })\n      );\n\n      // Auto-request media blobs when connected\n      if (status === 'connected' && this.options.autoGetMediaBlobs) {\n        setTimeout(() => this.getMediaBlobs(), 100);\n      }\n    });\n\n    this.connection.addEventListener('message', (e: any) => {\n      const { message } = e.detail;\n      this.handleServerMessage(message);\n    });\n\n    this.connection.addEventListener('connection-error', (e: any) => {\n      this.log('error', 'Connection error', e.detail);\n      this.dispatchEvent(\n        new CustomEvent('connection-error', { detail: e.detail })\n      );\n    });\n\n    this.connection.addEventListener('pong', (e: any) => {\n      this.log('debug', 'Pong received');\n      this.dispatchEvent(new CustomEvent('pong', { detail: e.detail }));\n    });\n\n    // Media blob manager events\n    this.blobManager.addEventListener('blobs-updated', (e: any) => {\n      this.log('info', `Media blobs updated: ${e.detail.count} blobs`);\n      this.dispatchEvent(\n        new CustomEvent('blobs-updated', { detail: e.detail })\n      );\n    });\n\n    this.blobManager.addEventListener('blob-data-requested', (e: any) => {\n      const { id } = e.detail;\n      this.connection.send({\n        type: 'GetMediaBlobData',\n        data: { id },\n      });\n    });\n\n    this.blobManager.addEventListener('blob-data-cached', (e: any) => {\n      this.log('debug', `Blob data cached: ${e.detail.id}`);\n      this.dispatchEvent(\n        new CustomEvent('blob-data-cached', { detail: e.detail })\n      );\n    });\n\n    // File upload events\n    this.uploadHandler.addEventListener('upload-started', (e: any) => {\n      const { file } = e.detail;\n      this.log('info', `Upload started: ${file.name}`);\n      this.dispatchEvent(\n        new CustomEvent('upload-started', { detail: e.detail })\n      );\n    });\n\n    this.uploadHandler.addEventListener('upload-completed', (e: any) => {\n      const { file, blob } = e.detail;\n      this.log('info', `Upload completed: ${file.name}`);\n\n      // Send the blob to the server\n      this.connection.send({\n        type: 'UploadMediaBlob',\n        data: { blob },\n      });\n\n      this.dispatchEvent(\n        new CustomEvent('upload-completed', { detail: e.detail })\n      );\n    });\n\n    this.uploadHandler.addEventListener('upload-error', (e: any) => {\n      const { file, error } = e.detail;\n      this.log('error', `Upload failed: ${file.name}`, { error });\n      this.dispatchEvent(new CustomEvent('upload-error', { detail: e.detail }));\n    });\n  }\n\n  private handleServerMessage(message: any): void {\n    switch (message.type) {\n      case 'MediaBlobs':\n        const blobsData = message.data;\n        this.log(\n          'info',\n          `Received ${blobsData?.blobs?.length || 0} media blobs`\n        );\n        this.blobManager.updateBlobs(blobsData?.blobs || []);\n        break;\n\n      case 'MediaBlob':\n        const blob = message.data?.blob;\n        this.log('info', `Received single media blob: ${blob?.id}`);\n        break;\n\n      case 'MediaBlobData':\n        const blobData = message.data as MediaBlobData;\n        this.log('debug', `Received blob data: ${blobData?.id}`);\n        this.blobManager.cacheBlobData(blobData);\n        break;\n\n      case 'Error':\n        const error = message.data?.message || 'Server error';\n        this.log('error', `Server error: ${error}`);\n        this.dispatchEvent(\n          new CustomEvent('server-error', {\n            detail: { error },\n          })\n        );\n        break;\n\n      default:\n        this.log('debug', `Unknown message type: ${message.type}`);\n    }\n\n    // Always emit the raw message\n    this.dispatchEvent(\n      new CustomEvent('message', {\n        detail: { message },\n      })\n    );\n  }\n\n  private log(level: string, message: string, data?: any): void {\n    if (!this.shouldLog(level)) return;\n\n    const event: DemoClientEvent = {\n      type: level,\n      timestamp: Date.now(),\n      data: { message, data },\n    };\n\n    this.eventLog.push(event);\n\n    // Keep last 100 entries\n    if (this.eventLog.length > 100) {\n      this.eventLog = this.eventLog.slice(-100);\n    }\n\n    // Emit log event\n    this.dispatchEvent(new CustomEvent('log', { detail: event }));\n\n    // Console log\n    const timestamp = new Date().toLocaleTimeString();\n    const logMessage = data\n      ? `[${timestamp}] [WebSocketDemo] ${message}: ${JSON.stringify(data, null, 2)}`\n      : `[${timestamp}] [WebSocketDemo] ${message}`;\n\n    switch (level) {\n      case 'error':\n        console.error(logMessage);\n        break;\n      case 'warn':\n        console.warn(logMessage);\n        break;\n      case 'debug':\n        console.debug(logMessage);\n        break;\n      default:\n        console.log(logMessage);\n    }\n  }\n\n  private shouldLog(level: string): boolean {\n    const levels = ['none', 'error', 'warn', 'info', 'debug'];\n    const currentLevel = levels.indexOf(this.options.logLevel || 'info');\n    const messageLevel = levels.indexOf(level);\n    return messageLevel <= currentLevel;\n  }\n\n  /**\n   * Destroy and clean up all resources\n   */\n  destroy(): void {\n    this.log('info', 'Destroying WebSocket demo client');\n\n    this.connection.destroy();\n    this.blobManager.destroy();\n    this.uploadHandler.destroy();\n\n    this.eventLog = [];\n\n    // Remove all event listeners\n    const events = [\n      'status-change',\n      'blobs-updated',\n      'blob-data-cached',\n      'upload-started',\n      'upload-completed',\n      'upload-error',\n      'connection-error',\n      'server-error',\n      'message',\n      'log',\n      'log-cleared',\n      'pong',\n    ];\n    events.forEach((event) => {\n      const listeners = (this as any)._listeners?.[event] || [];\n      listeners.forEach((listener: any) => {\n        this.removeEventListener(event, listener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket Demo Component\n *\n * A simple demo that showcases the modular WebSocket client library\n * components without heavy styling or complex UI logic.\n */\n\nimport { customElement } from 'solid-element';\nimport { createSignal, createEffect, For, Show, onCleanup } from 'solid-js';\nimport { WebSocketDemoClient } from '../lib/websocket-demo-client.js';\nimport type { MediaBlob } from '../lib/media-blob-manager.js';\n\nexport interface WebSocketDemoProps {\n  websocketUrl?: string;\n  autoConnect?: boolean;\n  showDebugLog?: boolean;\n}\n\nconst WebSocketDemo = (props: WebSocketDemoProps) => {\n  const [client, setClient] = createSignal<WebSocketDemoClient | null>(null);\n  const [status, setStatus] = createSignal('disconnected');\n  const [userCount, setUserCount] = createSignal(0);\n  const [blobs, setBlobs] = createSignal<MediaBlob[]>([]);\n  const [logs, setLogs] = createSignal<string[]>([]);\n  const [url, setUrl] = createSignal(\n    props.websocketUrl || 'ws://localhost:8080/ws'\n  );\n\n  // File upload ref\n  let fileInputRef: HTMLInputElement | undefined;\n\n  // Initialize client\n  createEffect(() => {\n    const wsClient = new WebSocketDemoClient(url(), {\n      logLevel: 'info',\n      autoGetMediaBlobs: true,\n    });\n\n    // Set up event listeners\n    wsClient.addEventListener('status-change', (e: any) => {\n      const { status: newStatus, userCount: newUserCount } = e.detail;\n      setStatus(newStatus);\n      setUserCount(newUserCount || 0);\n    });\n\n    wsClient.addEventListener('blobs-updated', (e: any) => {\n      setBlobs(e.detail.blobs);\n    });\n\n    wsClient.addEventListener('log', (e: any) => {\n      const { message, data } = e.detail.data;\n      const logEntry = data ? `${message}: ${JSON.stringify(data)}` : message;\n\n      setLogs((prev) => [...prev.slice(-49), logEntry]); // Keep last 50 entries\n    });\n\n    setClient(wsClient);\n\n    // Auto-connect if requested\n    if (props.autoConnect) {\n      wsClient.connect().catch(console.error);\n    }\n\n    // Cleanup on component unmount\n    onCleanup(() => {\n      wsClient.destroy();\n    });\n  });\n\n  const handleConnect = () => {\n    client()?.connect().catch(console.error);\n  };\n\n  const handleDisconnect = () => {\n    client()?.disconnect();\n  };\n\n  const handlePing = () => {\n    client()?.ping();\n  };\n\n  const handleGetBlobs = () => {\n    client()?.getMediaBlobs();\n  };\n\n  const handleFileUpload = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const files = target.files;\n    if (files && files.length > 0) {\n      client()?.uploadFiles(files);\n      target.value = ''; // Reset input\n    }\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef?.click();\n  };\n\n  const handleDownload = (blobId: string, filename?: string) => {\n    client()?.downloadBlob(blobId, filename);\n  };\n\n  const handleView = (blobId: string) => {\n    client()?.viewBlob(blobId);\n  };\n\n  const handleLoadData = (blobId: string) => {\n    client()?.loadBlobData(blobId);\n  };\n\n  const clearLogs = () => {\n    setLogs([]);\n    client()?.clearEventLog();\n  };\n\n  const getStatusColor = () => {\n    switch (status()) {\n      case 'connected':\n        return '#10b981';\n      case 'connecting':\n        return '#f59e0b';\n      case 'error':\n        return '#ef4444';\n      default:\n        return '#6b7280';\n    }\n  };\n\n  return (\n    <div style={{ padding: '1rem', 'font-family': 'sans-serif' }}>\n      <style>{`\n        .demo-section { margin-bottom: 2rem; }\n        .controls { display: flex; gap: 0.75rem; margin-bottom: 1rem; flex-wrap: wrap; align-items: center; }\n        button {\n          padding: 0.5rem 1rem;\n          border: 1px solid #ccc;\n          background: white;\n          cursor: pointer;\n          border-radius: 4px;\n          font-size: 0.875rem;\n          font-weight: 500;\n        }\n        button:hover:not(:disabled) { background: #f0f0f0; }\n        button:disabled { opacity: 0.5; cursor: not-allowed; }\n        button.primary { background: #3b82f6; color: white; border-color: #3b82f6; }\n        button.primary:hover:not(:disabled) { background: #2563eb; }\n        input[type=\"text\"] {\n          padding: 0.5rem;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          min-width: 300px;\n          font-size: 0.875rem;\n        }\n        .status-indicator {\n          display: inline-block;\n          width: 12px;\n          height: 12px;\n          border-radius: 50%;\n          margin-right: 0.5rem;\n        }\n        .log-container {\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 4px;\n          padding: 1rem;\n          max-height: 300px;\n          overflow-y: auto;\n          font-family: monospace;\n          font-size: 0.875rem;\n          white-space: pre-wrap;\n        }\n        .blob-list { display: grid; gap: 1rem; }\n        .blob-item {\n          border: 1px solid #e5e7eb;\n          border-radius: 8px;\n          padding: 1rem;\n          background: white;\n        }\n        .blob-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 0.5rem;\n        }\n        .blob-actions { display: flex; gap: 0.5rem; margin-top: 0.5rem; }\n        .blob-actions button {\n          font-size: 0.75rem;\n          padding: 0.25rem 0.5rem;\n          font-weight: normal;\n        }\n        .section-title {\n          margin: 0 0 1rem 0;\n          color: #374151;\n          font-weight: 600;\n        }\n        .empty-state {\n          text-align: center;\n          padding: 2rem;\n          color: #6b7280;\n          font-style: italic;\n        }\n      `}</style>\n\n      <h1>WebSocket Demo (Modular Components)</h1>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Connection</h2>\n        <div class=\"controls\">\n          <input\n            type=\"text\"\n            value={url()}\n            onInput={(e) => setUrl(e.target.value)}\n            placeholder=\"WebSocket URL\"\n            disabled={status() === 'connected' || status() === 'connecting'}\n          />\n          <button\n            class=\"primary\"\n            onClick={handleConnect}\n            disabled={status() === 'connected' || status() === 'connecting'}\n          >\n            Connect\n          </button>\n          <button\n            onClick={handleDisconnect}\n            disabled={status() === 'disconnected'}\n          >\n            Disconnect\n          </button>\n        </div>\n\n        <div style={{ 'margin-bottom': '1rem' }}>\n          <span\n            class=\"status-indicator\"\n            style={{ 'background-color': getStatusColor() }}\n          ></span>\n          Status: {status()}\n          <Show when={userCount() > 0}>\n            {' '}\n            ({userCount()} user{userCount() !== 1 ? 's' : ''} online)\n          </Show>\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Actions</h2>\n        <div class=\"controls\">\n          <button onClick={handlePing} disabled={status() !== 'connected'}>\n            Ping\n          </button>\n          <button onClick={handleGetBlobs} disabled={status() !== 'connected'}>\n            Get Media Blobs\n          </button>\n          <button\n            onClick={handleUploadClick}\n            disabled={status() !== 'connected'}\n          >\n            Upload Files\n          </button>\n          <button onClick={clearLogs}>Clear Log</button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            onChange={handleFileUpload}\n            disabled={status() !== 'connected'}\n            style={{ display: 'none' }}\n          />\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Media Blobs ({blobs().length})</h2>\n        <Show\n          when={blobs().length > 0}\n          fallback={\n            <div class=\"empty-state\">\n              No media blobs yet. Upload a file or get blobs from server.\n            </div>\n          }\n        >\n          <div class=\"blob-list\">\n            <For each={blobs()}>\n              {(blob) => {\n                const displayInfo = () => client()?.getBlobDisplayInfo(blob);\n                return (\n                  <div class=\"blob-item\">\n                    <div class=\"blob-header\">\n                      <div>\n                        <strong>{blob.id}</strong>\n                        <br />\n                        <small>\n                          {displayInfo()?.mime} • {displayInfo()?.size}\n                        </small>\n                      </div>\n                      <div innerHTML={displayInfo()?.thumbnailHtml}></div>\n                    </div>\n                    <div>\n                      <small>\n                        Path: {blob.local_path || 'None'}\n                        <br />\n                        Created: {new Date(blob.created_at).toLocaleString()}\n                      </small>\n                    </div>\n                    <div class=\"blob-actions\">\n                      <button\n                        onClick={() => handleDownload(blob.id, blob.local_path)}\n                      >\n                        Download\n                      </button>\n                      <button onClick={() => handleView(blob.id)}>View</button>\n                      <button onClick={() => handleLoadData(blob.id)}>\n                        Load Data\n                      </button>\n                    </div>\n                  </div>\n                );\n              }}\n            </For>\n          </div>\n        </Show>\n      </div>\n\n      <Show when={props.showDebugLog}>\n        <div class=\"demo-section\">\n          <h2 class=\"section-title\">Debug Log</h2>\n          <div class=\"controls\">\n            <button onClick={clearLogs}>Clear Log</button>\n          </div>\n          <div class=\"log-container\">\n            <For each={logs()}>{(log) => <div>{log}</div>}</For>\n            <Show when={logs().length === 0}>\n              <div style={{ color: '#6b7280', 'font-style': 'italic' }}>\n                No log entries yet...\n              </div>\n            </Show>\n          </div>\n        </div>\n      </Show>\n    </div>\n  );\n};\n\n// Register as custom element\ncustomElement(\n  'websocket-demo',\n  {\n    websocketUrl: 'ws://localhost:8080/ws',\n    autoConnect: false,\n    showDebugLog: true,\n  },\n  WebSocketDemo\n);\n\nexport { WebSocketDemo };\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'websocket-demo': {\n        websocketUrl?: string;\n        autoConnect?: boolean;\n        showDebugLog?: boolean;\n      };\n    }\n  }\n}\n/* eslint-enable @typescript-eslint/no-namespace */\n"],"names":["WebSocketConnection","options","resolve","reject","error","message","json","status","event","rawMessage","response","listener","MediaBlobManager","blobs","id","blob","blobData","uint8Array","dataUrl","blobId","mime","cachedData","isLoading","baseStyle","placeholderStyle","filename","downloadName","bytes","units","size","unitIndex","FileUploadHandler","files","fileArray","uploadIds","file","uploadId","upload","arrayBuffer","sha256","processedBlob","mimeType","reader","hashBuffer","b","data","now","uploads","u","WebSocketDemoClient","websocketUrl","limit","offset","userCount","connectionId","blobsData","level","timestamp","logMessage","levels","currentLevel","WebSocketDemo","props","client","setClient","createSignal","setStatus","setUserCount","setBlobs","logs","setLogs","url","setUrl","fileInputRef","createEffect","wsClient","logLevel","autoGetMediaBlobs","addEventListener","e","newStatus","newUserCount","detail","logEntry","JSON","stringify","prev","slice","autoConnect","connect","catch","console","onCleanup","destroy","handleConnect","handleDisconnect","disconnect","handlePing","ping","handleGetBlobs","getMediaBlobs","handleFileUpload","target","length","uploadFiles","value","handleUploadClick","click","handleDownload","downloadBlob","handleView","viewBlob","handleLoadData","loadBlobData","clearLogs","clearEventLog","getStatusColor","_el$","_tmpl$4","_el$2","firstChild","_el$3","nextSibling","_el$4","_el$5","_el$6","_el$7","_el$8","_el$9","_el$0","_el$1","_el$11","_el$12","_el$13","_el$14","_el$15","_el$16","_el$17","_el$18","_el$19","_el$20","_el$21","_el$23","style","setProperty","$$input","$$click","_$insert","_$createComponent","Show","when","children","_$memo","_ref$","_$use","fallback","_tmpl$5","_el$24","_tmpl$","For","each","displayInfo","getBlobDisplayInfo","_el$32","_tmpl$6","_el$33","_el$34","_el$35","_el$36","_el$37","_el$38","_el$39","_el$40","_el$41","_el$42","_el$43","_el$45","_el$46","_el$47","_el$48","local_path","Date","created_at","toLocaleString","_$effect","innerHTML","thumbnailHtml","showDebugLog","_el$25","_tmpl$3","_el$26","_el$27","_el$28","_el$29","_el$49","_tmpl$7","log","_el$30","_tmpl$2","_p$","_v$","_v$2","_v$3","_v$4","_v$5","_v$6","_v$7","_v$8","disabled","t","a","o","removeProperty","i","n","s","h","undefined","customElement","_$delegateEvents"],"mappings":"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"}