{"version":3,"file":"websocket-demo.js","sources":["../src/lib/media-blob-manager.ts","../src/lib/file-upload.ts","../src/lib/websocket-demo-client.ts","../src/web-components/websocket-demo.tsx"],"sourcesContent":["/**\n * Media Blob Manager\n *\n * Handles media blob data management, caching, thumbnail generation,\n * and display formatting for WebSocket-received media blobs.\n */\n\nexport interface MediaBlob {\n  id: string;\n  data?: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id?: string;\n  local_path?: string;\n  metadata: Record<string, unknown>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface MediaBlobData {\n  id: string;\n  data: number[];\n  mime: string;\n  size: number;\n}\n\nexport interface BlobDisplayInfo {\n  id: string;\n  mime: string;\n  size: string;\n  sha256: string;\n  clientId: string;\n  path: string;\n  createdAt: string;\n  metadata: string;\n  thumbnailHtml: string;\n}\n\nexport class MediaBlobManager extends EventTarget {\n  private blobs: MediaBlob[] = [];\n  private blobDataCache = new Map<string, string>(); // blob ID -> data URL\n  private loadingBlobs = new Set<string>();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Update the list of media blobs\n   */\n  updateBlobs(blobs: MediaBlob[]): void {\n    this.blobs = [...blobs];\n\n    // Auto-load images for thumbnails\n    this.blobs.forEach((blob) => {\n      if (\n        blob.mime?.startsWith(\"image/\") &&\n        !this.isCached(blob.id) &&\n        !this.isLoading(blob.id)\n      ) {\n        setTimeout(() => this.requestBlobData(blob.id), 100);\n      }\n    });\n\n    this.dispatchEvent(\n      new CustomEvent(\"blobs-updated\", {\n        detail: { blobs: this.blobs, count: this.blobs.length },\n      })\n    );\n  }\n\n  /**\n   * Get all blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return [...this.blobs];\n  }\n\n  /**\n   * Get a specific blob by ID\n   */\n  getBlob(id: string): MediaBlob | undefined {\n    return this.blobs.find((blob) => blob.id === id);\n  }\n\n  /**\n   * Add blob data to cache\n   */\n  cacheBlobData(blobData: MediaBlobData): void {\n    if (!blobData.id || !blobData.data) return;\n\n    // Convert data array to Uint8Array and create blob\n    const uint8Array = new Uint8Array(blobData.data);\n    const blob = new Blob([uint8Array], {\n      type: blobData.mime || \"application/octet-stream\",\n    });\n    const dataUrl = URL.createObjectURL(blob);\n\n    // Cache the data URL\n    this.blobDataCache.set(blobData.id, dataUrl);\n    this.loadingBlobs.delete(blobData.id);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-data-cached\", {\n        detail: { id: blobData.id, dataUrl, mime: blobData.mime },\n      })\n    );\n  }\n\n  /**\n   * Check if blob data is cached\n   */\n  isCached(blobId: string): boolean {\n    return this.blobDataCache.has(blobId);\n  }\n\n  /**\n   * Get cached data URL for a blob\n   */\n  getCachedDataUrl(blobId: string): string | undefined {\n    return this.blobDataCache.get(blobId);\n  }\n\n  /**\n   * Check if blob is currently loading\n   */\n  isLoading(blobId: string): boolean {\n    return this.loadingBlobs.has(blobId);\n  }\n\n  /**\n   * Mark blob as loading\n   */\n  markAsLoading(blobId: string): void {\n    this.loadingBlobs.add(blobId);\n  }\n\n  /**\n   * Request blob data (emits event for external handler)\n   */\n  requestBlobData(blobId: string): void {\n    if (this.isCached(blobId) || this.isLoading(blobId)) {\n      return;\n    }\n\n    this.markAsLoading(blobId);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-data-requested\", {\n        detail: { id: blobId },\n      })\n    );\n  }\n\n  /**\n   * Generate display information for a blob\n   */\n  getBlobDisplayInfo(blob: MediaBlob): BlobDisplayInfo {\n    return {\n      id: blob.id,\n      mime: blob.mime || \"Unknown type\",\n      size: this.formatFileSize(blob.size),\n      sha256: blob.sha256,\n      clientId: blob.source_client_id || \"Unknown\",\n      path: blob.local_path || \"None\",\n      createdAt: new Date(blob.created_at).toLocaleString(),\n      metadata:\n        Object.keys(blob.metadata || {}).length > 0\n          ? JSON.stringify(blob.metadata)\n          : \"\",\n      thumbnailHtml: this.generateThumbnailHtml(blob),\n    };\n  }\n\n  /**\n   * Generate thumbnail HTML for a blob\n   */\n  generateThumbnailHtml(blob: MediaBlob): string {\n    const mime = blob.mime || \"\";\n    const cachedData = this.getCachedDataUrl(blob.id);\n    const isLoading = this.isLoading(blob.id);\n\n    const baseStyle =\n      \"width: 80px; height: 80px; border-radius: 4px; object-fit: cover;\";\n    const placeholderStyle =\n      \"display: flex; align-items: center; justify-content: center; background: #f0f0f0; font-size: 0.7em; border-radius: 4px; cursor: pointer;\";\n\n    if (mime.startsWith(\"image/\")) {\n      if (cachedData) {\n        return `<img src=\"${cachedData}\" alt=\"Thumbnail\" style=\"${baseStyle}\" loading=\"lazy\">`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD IMAGE</div>`;\n      }\n    } else if (mime.startsWith(\"video/\")) {\n      if (cachedData) {\n        return `<video style=\"${baseStyle}\" controls muted><source src=\"${cachedData}\" type=\"${mime}\"></video>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD VIDEO</div>`;\n      }\n    } else if (mime.startsWith(\"audio/\")) {\n      if (cachedData) {\n        return `<audio style=\"${baseStyle}\" controls><source src=\"${cachedData}\" type=\"${mime}\"></audio>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD AUDIO</div>`;\n      }\n    } else if (mime === \"application/pdf\") {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">PDF</div>`;\n    } else {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">FILE</div>`;\n    }\n  }\n\n  /**\n   * Download a cached blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    const blob = this.getBlob(blobId);\n    const downloadName = filename || blob?.local_path || `blob-${blobId}`;\n\n    // Create download link\n    const a = document.createElement(\"a\");\n    a.href = cachedData;\n    a.download = downloadName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-downloaded\", {\n        detail: { id: blobId, filename: downloadName },\n      })\n    );\n\n    return true;\n  }\n\n  /**\n   * View a cached blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    window.open(cachedData, \"_blank\");\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-viewed\", {\n        detail: { id: blobId },\n      })\n    );\n\n    return true;\n  }\n\n  /**\n   * Format file size in human-readable format\n   */\n  formatFileSize(bytes: number): string {\n    if (!bytes) return \"Unknown size\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  clearCache(): void {\n    // Revoke all object URLs to free memory\n    for (const dataUrl of this.blobDataCache.values()) {\n      URL.revokeObjectURL(dataUrl);\n    }\n\n    this.blobDataCache.clear();\n    this.loadingBlobs.clear();\n\n    this.dispatchEvent(\n      new CustomEvent(\"cache-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): {\n    cachedCount: number;\n    loadingCount: number;\n    totalBlobs: number;\n  } {\n    return {\n      cachedCount: this.blobDataCache.size,\n      loadingCount: this.loadingBlobs.size,\n      totalBlobs: this.blobs.length,\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.clearCache();\n    this.blobs = [];\n\n    // Remove all event listeners\n    const events = [\n      \"blobs-updated\",\n      \"blob-data-cached\",\n      \"blob-data-requested\",\n      \"blob-downloaded\",\n      \"blob-viewed\",\n      \"cache-cleared\",\n    ];\n    events.forEach((event) => {\n      // Remove all listeners for each event type\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * File Upload Handler\n *\n * Handles file upload processing, validation, SHA256 calculation,\n * and conversion to the blob format expected by the WebSocket server.\n */\n\nexport interface UploadFile {\n  file: File;\n  id: string;\n  progress: number;\n  status: \"pending\" | \"processing\" | \"uploading\" | \"completed\" | \"error\";\n  error?: string;\n}\n\nexport interface ProcessedBlob {\n  id: string;\n  data: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id: string;\n  local_path: string;\n  metadata: Record<string, unknown>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface FileUploadOptions {\n  maxFileSize?: number; // in bytes, default 10MB\n  allowedMimeTypes?: string[]; // if provided, only these types are allowed\n  clientId?: string;\n  chunkSize?: number; // for future chunked uploads\n}\n\nexport class FileUploadHandler extends EventTarget {\n  private uploads = new Map<string, UploadFile>();\n  private options: Required<FileUploadOptions>;\n\n  constructor(options: FileUploadOptions = {}) {\n    super();\n\n    this.options = {\n      maxFileSize: 10 * 1024 * 1024, // 10MB default\n      allowedMimeTypes: [],\n      clientId: \"web-client\",\n      chunkSize: 64 * 1024, // 64KB chunks for future use\n      ...options,\n    };\n  }\n\n  /**\n   * Add files for upload processing\n   */\n  async addFiles(files: FileList | File[]): Promise<string[]> {\n    const fileArray = Array.from(files);\n    const uploadIds: string[] = [];\n\n    for (const file of fileArray) {\n      const uploadId = crypto.randomUUID();\n      uploadIds.push(uploadId);\n\n      const upload: UploadFile = {\n        file,\n        id: uploadId,\n        progress: 0,\n        status: \"pending\",\n      };\n\n      this.uploads.set(uploadId, upload);\n\n      // Start processing immediately\n      this.processFile(uploadId);\n    }\n\n    return uploadIds;\n  }\n\n  /**\n   * Get upload status\n   */\n  getUpload(uploadId: string): UploadFile | undefined {\n    return this.uploads.get(uploadId);\n  }\n\n  /**\n   * Get all uploads\n   */\n  getAllUploads(): UploadFile[] {\n    return Array.from(this.uploads.values());\n  }\n\n  /**\n   * Remove completed or failed uploads\n   */\n  clearCompleted(): void {\n    for (const [id, upload] of this.uploads.entries()) {\n      if (upload.status === \"completed\" || upload.status === \"error\") {\n        this.uploads.delete(id);\n      }\n    }\n\n    this.dispatchEvent(\n      new CustomEvent(\"uploads-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  /**\n   * Cancel an upload\n   */\n  cancelUpload(uploadId: string): void {\n    const upload = this.uploads.get(uploadId);\n    if (upload && upload.status !== \"completed\") {\n      upload.status = \"error\";\n      upload.error = \"Cancelled by user\";\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-cancelled\", {\n          detail: { uploadId, file: upload.file },\n        })\n      );\n    }\n  }\n\n  private async processFile(uploadId: string): Promise<void> {\n    const upload = this.uploads.get(uploadId);\n    if (!upload) return;\n\n    try {\n      upload.status = \"processing\";\n      upload.progress = 0;\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-started\", {\n          detail: { uploadId, file: upload.file },\n        })\n      );\n\n      // Validate file\n      this.validateFile(upload.file);\n      upload.progress = 10;\n\n      // Read file data\n      const arrayBuffer = await this.readFile(upload.file);\n      upload.progress = 30;\n\n      // Calculate SHA256\n      const sha256 = await this.calculateSHA256(arrayBuffer);\n      upload.progress = 60;\n\n      // Convert to processed blob format\n      const processedBlob = this.createProcessedBlob(\n        upload.file,\n        arrayBuffer,\n        sha256\n      );\n      upload.progress = 90;\n\n      upload.status = \"uploading\";\n      upload.progress = 100;\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-processed\", {\n          detail: { uploadId, file: upload.file, blob: processedBlob },\n        })\n      );\n\n      // Mark as completed (actual upload handled externally)\n      upload.status = \"completed\";\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-completed\", {\n          detail: { uploadId, file: upload.file, blob: processedBlob },\n        })\n      );\n    } catch (error) {\n      upload.status = \"error\";\n      upload.error = error instanceof Error ? error.message : String(error);\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-error\", {\n          detail: { uploadId, file: upload.file, error: upload.error },\n        })\n      );\n    }\n  }\n\n  private validateFile(file: File): void {\n    // Check file size\n    if (file.size > this.options.maxFileSize) {\n      throw new Error(\n        `File \"${file.name}\" is too large (${this.formatFileSize(file.size)}). Maximum size is ${this.formatFileSize(this.options.maxFileSize)}.`\n      );\n    }\n\n    // Check MIME type if restrictions are set\n    if (this.options.allowedMimeTypes.length > 0) {\n      const mimeType = file.type || \"application/octet-stream\";\n      if (!this.options.allowedMimeTypes.includes(mimeType)) {\n        throw new Error(\n          `File type \"${mimeType}\" is not allowed. Allowed types: ${this.options.allowedMimeTypes.join(\", \")}`\n        );\n      }\n    }\n\n    // Check for empty file\n    if (file.size === 0) {\n      throw new Error(`File \"${file.name}\" is empty.`);\n    }\n  }\n\n  private readFile(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.result instanceof ArrayBuffer) {\n          resolve(reader.result);\n        } else {\n          reject(new Error(\"Failed to read file as ArrayBuffer\"));\n        }\n      };\n\n      reader.onerror = () => {\n        reject(\n          new Error(\n            `Failed to read file: ${reader.error?.message || \"Unknown error\"}`\n          )\n        );\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  private async calculateSHA256(arrayBuffer: ArrayBuffer): Promise<string> {\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  }\n\n  private createProcessedBlob(\n    file: File,\n    arrayBuffer: ArrayBuffer,\n    sha256: string\n  ): ProcessedBlob {\n    const data = Array.from(new Uint8Array(arrayBuffer));\n    const now = new Date().toISOString();\n\n    return {\n      id: crypto.randomUUID(),\n      data,\n      sha256,\n      size: file.size,\n      mime: file.type || \"application/octet-stream\",\n      source_client_id: this.options.clientId,\n      local_path: file.name,\n      metadata: {\n        originalName: file.name,\n        lastModified: file.lastModified,\n        uploadedAt: now,\n        userAgent: navigator.userAgent,\n      },\n      created_at: now,\n      updated_at: now,\n    };\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (!bytes) return \"Unknown size\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getStats(): {\n    total: number;\n    pending: number;\n    processing: number;\n    uploading: number;\n    completed: number;\n    errors: number;\n  } {\n    const uploads = Array.from(this.uploads.values());\n\n    return {\n      total: uploads.length,\n      pending: uploads.filter((u) => u.status === \"pending\").length,\n      processing: uploads.filter((u) => u.status === \"processing\").length,\n      uploading: uploads.filter((u) => u.status === \"uploading\").length,\n      completed: uploads.filter((u) => u.status === \"completed\").length,\n      errors: uploads.filter((u) => u.status === \"error\").length,\n    };\n  }\n\n  /**\n   * Update options\n   */\n  updateOptions(options: Partial<FileUploadOptions>): void {\n    this.options = { ...this.options, ...options };\n\n    this.dispatchEvent(\n      new CustomEvent(\"options-updated\", {\n        detail: { options: this.options },\n      })\n    );\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.uploads.clear();\n\n    // Remove all event listeners\n    const events = [\n      \"upload-started\",\n      \"upload-processed\",\n      \"upload-completed\",\n      \"upload-error\",\n      \"upload-cancelled\",\n      \"uploads-cleared\",\n      \"options-updated\",\n    ];\n    events.forEach((event) => {\n      // Remove all listeners for each event type\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket Demo Client\n *\n * A unified client that orchestrates WebSocket connection, media blob management,\n * and file uploads. This provides a high-level interface that combines all the\n * modular components into a cohesive demo client.\n */\n\nimport {\n  WebSocketClient,\n  type WebSocketClientConfig,\n} from \"./websocket-client.js\";\nimport { ConnectionStatus } from \"./websocket-types.js\";\nimport {\n  MediaBlobManager,\n  type MediaBlob,\n  type MediaBlobData,\n} from \"./media-blob-manager.js\";\nimport { FileUploadHandler, type FileUploadOptions } from \"./file-upload.js\";\n\nexport interface WebSocketDemoClientOptions {\n  websocket?: WebSocketClientConfig;\n  fileUpload?: FileUploadOptions;\n  autoGetMediaBlobs?: boolean;\n  logLevel?: \"none\" | \"error\" | \"warn\" | \"info\" | \"debug\";\n}\n\nexport interface DemoClientEvent {\n  type: string;\n  timestamp: number;\n  data?: unknown;\n}\n\nexport class WebSocketDemoClient extends EventTarget {\n  private client: WebSocketClient;\n  private blobManager: MediaBlobManager;\n  private uploadHandler: FileUploadHandler;\n  private eventLog: DemoClientEvent[] = [];\n  private options: WebSocketDemoClientOptions;\n\n  constructor(websocketUrl: string, options: WebSocketDemoClientOptions = {}) {\n    super();\n\n    this.options = {\n      autoGetMediaBlobs: true,\n      logLevel: \"info\",\n      ...options,\n    };\n\n    // Initialize components\n    this.client = new WebSocketClient({\n      url: websocketUrl,\n      debug: this.options.logLevel === \"debug\",\n      ...this.options.websocket,\n    });\n\n    this.blobManager = new MediaBlobManager();\n\n    this.uploadHandler = new FileUploadHandler({\n      clientId: \"demo-client\",\n      ...this.options.fileUpload,\n    });\n\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    this.log(\"info\", \"Connecting to WebSocket server\");\n    this.client.connect();\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  disconnect(): void {\n    this.log(\"info\", \"Disconnecting from WebSocket server\");\n    this.client.disconnect();\n  }\n\n  /**\n   * Send a ping message\n   */\n  ping(): void {\n    this.log(\"debug\", \"Sending ping\");\n    this.client.ping();\n  }\n\n  /**\n   * Request media blobs from server\n   */\n  getMediaBlobs(limit = 10, offset = 0): void {\n    this.log(\n      \"debug\",\n      `Requesting media blobs (limit: ${limit}, offset: ${offset})`\n    );\n    this.client.getMediaBlobs(limit, offset);\n  }\n\n  /**\n   * Upload files\n   */\n  async uploadFiles(files: FileList | File[]): Promise<string[]> {\n    this.log(\"info\", `Starting upload of ${files.length} file(s)`);\n    return this.uploadHandler.addFiles(files);\n  }\n\n  /**\n   * Download a media blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    this.log(\"debug\", `Downloading blob: ${blobId}`);\n    return this.blobManager.downloadBlob(blobId, filename);\n  }\n\n  /**\n   * View a media blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    this.log(\"debug\", `Viewing blob: ${blobId}`);\n    return this.blobManager.viewBlob(blobId);\n  }\n\n  /**\n   * Load blob data from server\n   */\n  loadBlobData(blobId: string): void {\n    this.log(\"debug\", `Loading blob data: ${blobId}`);\n    this.client.getMediaBlobData(blobId);\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionStatus(): ConnectionStatus {\n    return this.client.getStatus();\n  }\n\n  /**\n   * Check if connected\n   */\n  isConnected(): boolean {\n    return this.client.getStatus() === ConnectionStatus.Connected;\n  }\n\n  /**\n   * Get current user count\n   */\n  getUserCount(): number {\n    // User count is maintained by connection status messages\n    return 0; // TODO: Track this from ConnectionStatus messages\n  }\n\n  /**\n   * Get connection ID\n   */\n  getConnectionId(): string {\n    // Connection ID is received in Welcome message\n    return \"\"; // TODO: Track this from Welcome messages\n  }\n\n  /**\n   * Get all media blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return this.blobManager.getBlobs();\n  }\n\n  /**\n   * Get blob display info\n   */\n  getBlobDisplayInfo(blob: MediaBlob) {\n    return this.blobManager.getBlobDisplayInfo(blob);\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getUploadStats() {\n    return this.uploadHandler.getStats();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return this.blobManager.getCacheStats();\n  }\n\n  /**\n   * Clear completed uploads\n   */\n  clearCompletedUploads(): void {\n    this.uploadHandler.clearCompleted();\n  }\n\n  /**\n   * Clear blob cache\n   */\n  clearBlobCache(): void {\n    this.blobManager.clearCache();\n  }\n\n  /**\n   * Get event log\n   */\n  getEventLog(): DemoClientEvent[] {\n    return [...this.eventLog];\n  }\n\n  /**\n   * Clear event log\n   */\n  clearEventLog(): void {\n    this.eventLog = [];\n    this.dispatchEvent(\n      new CustomEvent(\"log-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  private setupEventHandlers(): void {\n    // WebSocket client events\n    this.client.on(\"statusChange\", (status) => {\n      this.log(\"info\", `Connection status changed: ${status}`);\n\n      this.dispatchEvent(\n        new CustomEvent(\"status-change\", {\n          detail: { status },\n        })\n      );\n\n      // Auto-request media blobs when connected\n      if (\n        status === ConnectionStatus.Connected &&\n        this.options.autoGetMediaBlobs\n      ) {\n        setTimeout(() => this.getMediaBlobs(), 100);\n      }\n    });\n\n    this.client.on(\"welcome\", (data) => {\n      this.log(\"info\", \"Welcome received\", data);\n      this.dispatchEvent(new CustomEvent(\"welcome\", { detail: data }));\n    });\n\n    this.client.on(\"error\", (data) => {\n      this.log(\"error\", \"Server error\", data);\n      this.dispatchEvent(new CustomEvent(\"server-error\", { detail: data }));\n    });\n\n    this.client.on(\"parseError\", (error, rawMessage) => {\n      this.log(\"error\", \"Parse error\", { error: error.message, rawMessage });\n      this.dispatchEvent(\n        new CustomEvent(\"parse-error\", {\n          detail: { error: error.message, rawMessage },\n        })\n      );\n    });\n\n    this.client.on(\"mediaBlobs\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlobs\", data });\n    });\n\n    this.client.on(\"mediaBlob\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlob\", data });\n    });\n\n    this.client.on(\"mediaBlobData\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlobData\", data });\n    });\n\n    this.client.on(\"connectionStatus\", (data) => {\n      this.handleServerMessage({ type: \"ConnectionStatus\", data });\n    });\n\n    // Media blob manager events\n    this.blobManager.addEventListener(\"blobs-updated\", (e: Event) => {\n      const detail = (e as CustomEvent).detail;\n      this.log(\"info\", `Media blobs updated: ${detail.count} blobs`);\n      this.dispatchEvent(new CustomEvent(\"blobs-updated\", { detail }));\n    });\n\n    this.blobManager.addEventListener(\"blob-data-requested\", (e: Event) => {\n      const { id } = (e as CustomEvent).detail;\n      this.client.getMediaBlobData(id);\n    });\n\n    this.blobManager.addEventListener(\"blob-data-cached\", (e: Event) => {\n      const detail = (e as CustomEvent).detail;\n      this.log(\"debug\", `Blob data cached: ${detail.id}`);\n      this.dispatchEvent(new CustomEvent(\"blob-data-cached\", { detail }));\n    });\n\n    // File upload events\n    this.uploadHandler.addEventListener(\"upload-started\", (e: Event) => {\n      const { file } = (e as CustomEvent).detail;\n      this.log(\"info\", `Upload started: ${file.name}`);\n      this.dispatchEvent(\n        new CustomEvent(\"upload-started\", { detail: (e as CustomEvent).detail })\n      );\n    });\n\n    this.uploadHandler.addEventListener(\"upload-completed\", (e: Event) => {\n      const { file, blob } = (e as CustomEvent).detail;\n      this.log(\"info\", `Upload completed: ${file.name}`);\n\n      // Send the blob to the server\n      this.client.uploadMediaBlob(blob);\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-completed\", {\n          detail: (e as CustomEvent).detail,\n        })\n      );\n    });\n\n    this.uploadHandler.addEventListener(\"upload-error\", (e: Event) => {\n      const { file, error } = (e as CustomEvent).detail;\n      this.log(\"error\", `Upload failed: ${file.name}`, { error });\n      this.dispatchEvent(\n        new CustomEvent(\"upload-error\", { detail: (e as CustomEvent).detail })\n      );\n    });\n  }\n\n  private handleServerMessage(message: { type: string; data?: unknown }): void {\n    switch (message.type) {\n      case \"MediaBlobs\": {\n        const blobsData = message.data as {\n          blobs?: MediaBlob[];\n          total_count?: number;\n        };\n        this.log(\n          \"info\",\n          `Received ${blobsData?.blobs?.length || 0} media blobs`\n        );\n        this.blobManager.updateBlobs(blobsData?.blobs || []);\n        break;\n      }\n\n      case \"MediaBlob\": {\n        const blobData = message.data as { blob?: MediaBlob };\n        const blob = blobData?.blob;\n        this.log(\"info\", `Received single media blob: ${blob?.id}`);\n        break;\n      }\n\n      case \"MediaBlobData\": {\n        const blobData = message.data as MediaBlobData;\n        this.log(\"debug\", `Received blob data: ${blobData?.id}`);\n        if (blobData) {\n          this.blobManager.cacheBlobData(blobData);\n        }\n        break;\n      }\n\n      case \"Error\": {\n        const errorData = message.data as { message?: string };\n        const error = errorData?.message || \"Server error\";\n        this.log(\"error\", `Server error: ${error}`);\n        this.dispatchEvent(\n          new CustomEvent(\"server-error\", {\n            detail: { error },\n          })\n        );\n        break;\n      }\n\n      default:\n        this.log(\"debug\", `Unknown message type: ${message.type}`);\n    }\n\n    // Always emit the raw message\n    this.dispatchEvent(\n      new CustomEvent(\"message\", {\n        detail: { message },\n      })\n    );\n  }\n\n  private log(level: string, message: string, data?: unknown): void {\n    if (!this.shouldLog(level)) return;\n\n    const event: DemoClientEvent = {\n      type: level,\n      timestamp: Date.now(),\n      data: { message, data },\n    };\n\n    this.eventLog.push(event);\n\n    // Keep last 100 entries\n    if (this.eventLog.length > 100) {\n      this.eventLog = this.eventLog.slice(-100);\n    }\n\n    // Emit log event\n    this.dispatchEvent(new CustomEvent(\"log\", { detail: event }));\n\n    // Console log\n    const timestamp = new Date().toLocaleTimeString();\n    const logMessage = data\n      ? `[${timestamp}] [WebSocketDemo] ${message}: ${JSON.stringify(data, null, 2)}`\n      : `[${timestamp}] [WebSocketDemo] ${message}`;\n\n    switch (level) {\n      case \"error\":\n        console.error(logMessage);\n        break;\n      case \"warn\":\n        console.warn(logMessage);\n        break;\n      case \"debug\":\n        console.debug(logMessage);\n        break;\n      default:\n        console.log(logMessage);\n    }\n  }\n\n  private shouldLog(level: string): boolean {\n    const levels = [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n    const currentLevel = levels.indexOf(this.options.logLevel || \"info\");\n    const messageLevel = levels.indexOf(level);\n    return messageLevel <= currentLevel;\n  }\n\n  /**\n   * Destroy and clean up all resources\n   */\n  destroy(): void {\n    this.log(\"info\", \"Destroying WebSocket demo client\");\n\n    this.client.disconnect();\n    this.blobManager.destroy();\n    this.uploadHandler.destroy();\n\n    this.eventLog = [];\n\n    // Remove all event listeners\n    const events = [\n      \"status-change\",\n      \"welcome\",\n      \"blobs-updated\",\n      \"blob-data-cached\",\n      \"upload-started\",\n      \"upload-completed\",\n      \"upload-error\",\n      \"server-error\",\n      \"parse-error\",\n      \"message\",\n      \"log\",\n      \"log-cleared\",\n    ];\n    events.forEach((event) => {\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket Demo Component\n *\n * A simple demo that showcases the modular WebSocket client library\n * components without heavy styling or complex UI logic.\n */\n\n/* @jsxImportSource solid-js */\nimport { customElement } from \"solid-element\";\nimport { createSignal, createEffect, For, Show, onCleanup } from \"solid-js\";\nimport { WebSocketDemoClient } from \"../lib/websocket-demo-client.js\";\nimport type { MediaBlob } from \"../lib/media-blob-manager.js\";\n\nexport interface WebSocketDemoProps {\n  websocketUrl?: string;\n  autoConnect?: boolean;\n  showDebugLog?: boolean;\n}\n\nconst WebSocketDemo = (props: WebSocketDemoProps) => {\n  const [client, setClient] = createSignal<WebSocketDemoClient | null>(null);\n  const [status, setStatus] = createSignal(\"disconnected\");\n  const [userCount, setUserCount] = createSignal(0);\n  const [blobs, setBlobs] = createSignal<MediaBlob[]>([]);\n  const [logs, setLogs] = createSignal<string[]>([]);\n  const [thumbnailRefresh, setThumbnailRefresh] = createSignal(0);\n  const [url, setUrl] = createSignal(\"ws://localhost:8080/ws\");\n\n  // Initialize URL from props\n  createEffect(() => {\n    const initialUrl = props.websocketUrl;\n    if (initialUrl) {\n      setUrl(initialUrl);\n    }\n  });\n\n  // File upload ref\n  let fileInputRef: HTMLInputElement | undefined;\n\n  // Global function for loading blob data (called from thumbnail onclick)\n\n  (\n    window as unknown as { loadBlobData: (blobId: string) => void }\n  ).loadBlobData = // eslint-disable-next-line solid/reactivity\n    (blobId: string) => {\n      client()?.loadBlobData(blobId);\n    };\n\n  // Initialize client\n  createEffect(() => {\n    const currentUrl = url();\n\n    const wsClient = new WebSocketDemoClient(currentUrl, {\n      logLevel: \"info\",\n      autoGetMediaBlobs: true,\n    });\n\n    // Set up event listeners\n\n    wsClient.addEventListener(\"status-change\", (e: Event) => {\n      const { status: newStatus, userCount: newUserCount } = (e as CustomEvent)\n        .detail;\n      setStatus(newStatus);\n      setUserCount(newUserCount || 0);\n    });\n\n    wsClient.addEventListener(\"blobs-updated\", (e: Event) => {\n      setBlobs((e as CustomEvent).detail.blobs);\n    });\n\n    wsClient.addEventListener(\"blob-data-cached\", () => {\n      // Trigger thumbnail refresh\n      setThumbnailRefresh((prev) => prev + 1);\n    });\n\n    wsClient.addEventListener(\"log\", (e: Event) => {\n      const { message, data } = (e as CustomEvent).detail.data;\n      const logEntry = data ? `${message}: ${JSON.stringify(data)}` : message;\n\n      setLogs((prev) => [...prev.slice(-49), logEntry]); // Keep last 50 entries\n    });\n\n    setClient(wsClient);\n\n    // Auto-connect if requested\n    if (props.autoConnect) {\n      wsClient.connect().catch(console.error);\n    }\n\n    // Cleanup on component unmount\n    onCleanup(() => {\n      wsClient.destroy();\n    });\n  });\n\n  const handleConnect = () => {\n    client()?.connect().catch(console.error);\n  };\n\n  const handleDisconnect = () => {\n    client()?.disconnect();\n  };\n\n  const handlePing = () => {\n    client()?.ping();\n  };\n\n  const handleGetBlobs = () => {\n    client()?.getMediaBlobs();\n  };\n\n  const handleFileUpload = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const files = target.files;\n    if (files && files.length > 0) {\n      client()?.uploadFiles(files);\n      target.value = \"\"; // Reset input\n    }\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef?.click();\n  };\n\n  const handleDownload = (blobId: string, filename?: string) => {\n    client()?.downloadBlob(blobId, filename);\n  };\n\n  const handleView = (blobId: string) => {\n    client()?.viewBlob(blobId);\n  };\n\n  const handleLoadData = (blobId: string) => {\n    client()?.loadBlobData(blobId);\n  };\n\n  const clearLogs = () => {\n    setLogs([]);\n    client()?.clearEventLog();\n  };\n\n  const getStatusColor = () => {\n    switch (status()) {\n      case \"connected\":\n        return \"#10b981\";\n      case \"connecting\":\n        return \"#f59e0b\";\n      case \"error\":\n        return \"#ef4444\";\n      default:\n        return \"#6b7280\";\n    }\n  };\n\n  return (\n    <div style={{ padding: \"1rem\", \"font-family\": \"sans-serif\" }}>\n      <style>{`\n        .demo-section { margin-bottom: 2rem; }\n        .controls { display: flex; gap: 0.75rem; margin-bottom: 1rem; flex-wrap: wrap; align-items: center; }\n        button {\n          padding: 0.5rem 1rem;\n          border: 1px solid #ccc;\n          background: white;\n          cursor: pointer;\n          border-radius: 4px;\n          font-size: 0.875rem;\n          font-weight: 500;\n        }\n        button:hover:not(:disabled) { background: #f0f0f0; }\n        button:disabled { opacity: 0.5; cursor: not-allowed; }\n        button.primary { background: #3b82f6; color: white; border-color: #3b82f6; }\n        button.primary:hover:not(:disabled) { background: #2563eb; }\n        input[type=\"text\"] {\n          padding: 0.5rem;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          min-width: 300px;\n          font-size: 0.875rem;\n        }\n        .status-indicator {\n          display: inline-block;\n          width: 12px;\n          height: 12px;\n          border-radius: 50%;\n          margin-right: 0.5rem;\n        }\n        .log-container {\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 4px;\n          padding: 1rem;\n          max-height: 300px;\n          overflow-y: auto;\n          font-family: monospace;\n          font-size: 0.875rem;\n          white-space: pre-wrap;\n        }\n        .blob-list { display: grid; gap: 1rem; }\n        .blob-item {\n          border: 1px solid #e5e7eb;\n          border-radius: 8px;\n          padding: 1rem;\n          background: white;\n        }\n        .blob-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 0.5rem;\n        }\n        .blob-actions { display: flex; gap: 0.5rem; margin-top: 0.5rem; }\n        .blob-actions button {\n          font-size: 0.75rem;\n          padding: 0.25rem 0.5rem;\n          font-weight: normal;\n        }\n        .section-title {\n          margin: 0 0 1rem 0;\n          color: #374151;\n          font-weight: 600;\n        }\n        .empty-state {\n          text-align: center;\n          padding: 2rem;\n          color: #6b7280;\n          font-style: italic;\n        }\n      `}</style>\n\n      <h1>WebSocket Demo (Modular Components)</h1>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Connection</h2>\n        <div class=\"controls\">\n          <input\n            type=\"text\"\n            value={url()}\n            onInput={(e) => setUrl(e.target.value)}\n            placeholder=\"WebSocket URL\"\n            disabled={status() === \"connected\" || status() === \"connecting\"}\n          />\n          <button\n            class=\"primary\"\n            onClick={handleConnect}\n            disabled={status() === \"connected\" || status() === \"connecting\"}\n          >\n            Connect\n          </button>\n          <button\n            onClick={handleDisconnect}\n            disabled={status() === \"disconnected\"}\n          >\n            Disconnect\n          </button>\n        </div>\n\n        <div style={{ \"margin-bottom\": \"1rem\" }}>\n          <span\n            class=\"status-indicator\"\n            style={{ \"background-color\": getStatusColor() }}\n          />\n          Status: {status()}\n          <Show when={userCount() > 0}>\n            {\" \"}\n            ({userCount()} user{userCount() !== 1 ? \"s\" : \"\"} online)\n          </Show>\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Actions</h2>\n        <div class=\"controls\">\n          <button onClick={handlePing} disabled={status() !== \"connected\"}>\n            Ping\n          </button>\n          <button onClick={handleGetBlobs} disabled={status() !== \"connected\"}>\n            Get Media Blobs\n          </button>\n          <button\n            onClick={handleUploadClick}\n            disabled={status() !== \"connected\"}\n          >\n            Upload Files\n          </button>\n          <button onClick={clearLogs}>Clear Log</button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            onChange={handleFileUpload}\n            disabled={status() !== \"connected\"}\n            style={{ display: \"none\" }}\n          />\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Media Blobs ({blobs().length})</h2>\n        <Show\n          when={blobs().length > 0}\n          fallback={\n            <div class=\"empty-state\">\n              No media blobs yet. Upload a file or get blobs from server.\n            </div>\n          }\n        >\n          <div class=\"blob-list\">\n            <For each={blobs()}>\n              {(blob) => {\n                const displayInfo = () => {\n                  // Include refresh signal to make this reactive\n                  thumbnailRefresh();\n                  return client()?.getBlobDisplayInfo(blob);\n                };\n                return (\n                  <div class=\"blob-item\">\n                    <div class=\"blob-header\">\n                      <div>\n                        <strong>{blob.id}</strong>\n                        <br />\n                        <small>\n                          {displayInfo()?.mime} • {displayInfo()?.size}\n                        </small>\n                      </div>\n                      {/* eslint-disable-next-line solid/no-innerhtml */}\n                      <div innerHTML={displayInfo()?.thumbnailHtml} />\n                    </div>\n                    <div>\n                      <small>\n                        Path: {blob.local_path || \"None\"}\n                        <br />\n                        Created: {new Date(blob.created_at).toLocaleString()}\n                      </small>\n                    </div>\n                    <div class=\"blob-actions\">\n                      <button\n                        onClick={() => handleDownload(blob.id, blob.local_path)}\n                      >\n                        Download\n                      </button>\n                      <button onClick={() => handleView(blob.id)}>View</button>\n                      <button onClick={() => handleLoadData(blob.id)}>\n                        Load Data\n                      </button>\n                    </div>\n                  </div>\n                );\n              }}\n            </For>\n          </div>\n        </Show>\n      </div>\n\n      <Show when={props.showDebugLog}>\n        <div class=\"demo-section\">\n          <h2 class=\"section-title\">Debug Log</h2>\n          <div class=\"controls\">\n            <button onClick={clearLogs}>Clear Log</button>\n          </div>\n          <div class=\"log-container\">\n            <For each={logs()}>{(log) => <div>{log}</div>}</For>\n            <Show when={logs().length === 0}>\n              <div style={{ color: \"#6b7280\", \"font-style\": \"italic\" }}>\n                No log entries yet...\n              </div>\n            </Show>\n          </div>\n        </div>\n      </Show>\n    </div>\n  );\n};\n\n// Register as custom element\ncustomElement(\n  \"websocket-demo\",\n  {\n    websocketUrl: \"ws://localhost:8080/ws\",\n    autoConnect: false,\n    showDebugLog: true,\n  },\n  WebSocketDemo\n);\n\nexport { WebSocketDemo };\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"websocket-demo\": {\n        websocketUrl?: string;\n        autoConnect?: boolean;\n        showDebugLog?: boolean;\n      };\n    }\n  }\n}\n/* eslint-enable @typescript-eslint/no-namespace */\n"],"names":["MediaBlobManager","blobs","blob","id","blobData","uint8Array","dataUrl","blobId","mime","cachedData","isLoading","baseStyle","placeholderStyle","filename","downloadName","bytes","units","size","unitIndex","event","listener","FileUploadHandler","options","files","fileArray","uploadIds","file","uploadId","upload","arrayBuffer","sha256","processedBlob","error","mimeType","resolve","reject","reader","hashBuffer","b","data","now","uploads","u","WebSocketDemoClient","websocketUrl","WebSocketClient","limit","offset","ConnectionStatus","status","rawMessage","detail","message","blobsData","level","timestamp","logMessage","levels","currentLevel","WebSocketDemo","props","client","setClient","createSignal","setStatus","userCount","setUserCount","setBlobs","logs","setLogs","thumbnailRefresh","setThumbnailRefresh","url","setUrl","createEffect","initialUrl","fileInputRef","window","loadBlobData","currentUrl","wsClient","logLevel","autoGetMediaBlobs","addEventListener","e","newStatus","newUserCount","prev","logEntry","JSON","stringify","slice","autoConnect","connect","catch","console","onCleanup","destroy","handleConnect","handleDisconnect","disconnect","handlePing","ping","handleGetBlobs","getMediaBlobs","handleFileUpload","target","length","uploadFiles","value","handleUploadClick","click","handleDownload","downloadBlob","handleView","viewBlob","handleLoadData","clearLogs","clearEventLog","getStatusColor","_el$","_tmpl$4","_el$2","firstChild","_el$3","nextSibling","_el$4","_el$5","_el$6","_el$7","_el$8","_el$9","_el$0","_el$1","_el$11","_el$12","_el$13","_el$14","_el$15","_el$16","_el$17","_el$18","_el$19","_el$20","_el$21","_el$23","style","setProperty","$$input","$$click","_$insert","_$createComponent","Show","when","children","_$memo","_ref$","_$use","fallback","_tmpl$5","_el$24","_tmpl$","For","each","displayInfo","getBlobDisplayInfo","_el$32","_tmpl$6","_el$33","_el$34","_el$35","_el$36","_el$37","_el$38","_el$39","_el$40","_el$41","_el$42","_el$43","_el$45","_el$46","_el$47","_el$48","local_path","Date","created_at","toLocaleString","_$effect","innerHTML","thumbnailHtml","showDebugLog","_el$25","_tmpl$3","_el$26","_el$27","_el$28","_el$29","_el$49","_tmpl$7","log","_el$30","_tmpl$2","_p$","_v$","_v$2","_v$3","_v$4","_v$5","_v$6","_v$7","_v$8","disabled","t","a","o","removeProperty","i","n","s","h","undefined","customElement","_$delegateEvents"],"mappings":"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"}