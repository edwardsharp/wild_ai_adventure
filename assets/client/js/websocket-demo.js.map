{"version":3,"file":"websocket-demo.js","sources":["../src/lib/media-blob-manager.ts","../src/lib/websocket-file-upload.ts","../src/lib/websocket-demo-client.ts","../src/lib/file-upload.ts","../src/web-components/websocket-demo.tsx"],"sourcesContent":["/**\n * Media Blob Manager\n *\n * Handles media blob data management, caching, thumbnail generation,\n * and display formatting for WebSocket-received media blobs.\n */\n\nexport interface MediaBlob {\n  id: string;\n  data?: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id?: string;\n  local_path?: string;\n  metadata: Record<string, unknown>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface MediaBlobData {\n  id: string;\n  data: number[];\n  mime: string;\n  size: number;\n}\n\nexport interface BlobDisplayInfo {\n  id: string;\n  mime: string;\n  size: string;\n  sha256: string;\n  clientId: string;\n  path: string;\n  createdAt: string;\n  metadata: string;\n  thumbnailHtml: string;\n  fileUrl?: string; // Full URL for accessing large files\n  storageType: \"database\" | \"disk\"; // How the file is stored\n}\n\nexport class MediaBlobManager extends EventTarget {\n  private blobs: MediaBlob[] = [];\n  private blobDataCache = new Map<string, string>(); // blob ID -> data URL\n  private loadingBlobs = new Set<string>();\n  private baseUrl: string;\n\n  constructor(baseUrl: string = \"http://localhost:8080\") {\n    super();\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\"); // Remove trailing slash\n  }\n\n  /**\n   * Update the list of media blobs\n   */\n  updateBlobs(blobs: MediaBlob[]): void {\n    this.blobs = [...blobs];\n\n    // Auto-load images for thumbnails (only for database-stored images)\n    this.blobs.forEach((blob) => {\n      if (\n        blob.mime?.startsWith(\"image/\") &&\n        !blob.local_path && // Only load database-stored images\n        !this.isCached(blob.id) &&\n        !this.isLoading(blob.id)\n      ) {\n        setTimeout(() => this.requestBlobData(blob.id), 100);\n      }\n    });\n\n    this.dispatchEvent(\n      new CustomEvent(\"blobs-updated\", {\n        detail: { blobs: this.blobs, count: this.blobs.length },\n      })\n    );\n  }\n\n  /**\n   * Get all blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return [...this.blobs];\n  }\n\n  /**\n   * Get a specific blob by ID\n   */\n  getBlob(id: string): MediaBlob | undefined {\n    return this.blobs.find((blob) => blob.id === id);\n  }\n\n  /**\n   * Add blob data to cache\n   */\n  cacheBlobData(blobData: MediaBlobData): void {\n    if (!blobData.id || !blobData.data) return;\n\n    // Convert data array to Uint8Array and create blob\n    const uint8Array = new Uint8Array(blobData.data);\n    const blob = new Blob([uint8Array], {\n      type: blobData.mime || \"application/octet-stream\",\n    });\n    const dataUrl = URL.createObjectURL(blob);\n\n    // Cache the data URL\n    this.blobDataCache.set(blobData.id, dataUrl);\n    this.loadingBlobs.delete(blobData.id);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-data-cached\", {\n        detail: { id: blobData.id, dataUrl, mime: blobData.mime },\n      })\n    );\n  }\n\n  /**\n   * Check if blob data is cached\n   */\n  isCached(blobId: string): boolean {\n    return this.blobDataCache.has(blobId);\n  }\n\n  /**\n   * Get cached data URL for a blob\n   */\n  getCachedDataUrl(blobId: string): string | undefined {\n    return this.blobDataCache.get(blobId);\n  }\n\n  /**\n   * Check if blob is currently loading\n   */\n  isLoading(blobId: string): boolean {\n    return this.loadingBlobs.has(blobId);\n  }\n\n  /**\n   * Mark blob as loading\n   */\n  markAsLoading(blobId: string): void {\n    this.loadingBlobs.add(blobId);\n  }\n\n  /**\n   * Request blob data (emits event for external handler)\n   */\n  requestBlobData(blobId: string): void {\n    if (this.isCached(blobId) || this.isLoading(blobId)) {\n      return;\n    }\n\n    this.markAsLoading(blobId);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-data-requested\", {\n        detail: { id: blobId },\n      })\n    );\n  }\n\n  /**\n   * Generate display information for a blob\n   */\n  getBlobDisplayInfo(blob: MediaBlob): BlobDisplayInfo {\n    const storageType = this.getStorageType(blob);\n    const fileUrl = this.getFileUrl(blob);\n\n    return {\n      id: blob.id,\n      mime: blob.mime || \"Unknown type\",\n      size: this.formatFileSize(blob.size),\n      sha256: blob.sha256,\n      clientId: blob.source_client_id || \"Unknown\",\n      path: blob.local_path || \"None\",\n      createdAt: new Date(blob.created_at).toLocaleString(),\n      metadata:\n        Object.keys(blob.metadata || {}).length > 0\n          ? JSON.stringify(blob.metadata)\n          : \"\",\n      thumbnailHtml: this.generateThumbnailHtml(blob),\n      fileUrl,\n      storageType,\n    };\n  }\n\n  /**\n   * Generate thumbnail HTML for a blob\n   */\n  generateThumbnailHtml(blob: MediaBlob): string {\n    const mime = blob.mime || \"\";\n    const cachedData = this.getCachedDataUrl(blob.id);\n    const isLoading = this.isLoading(blob.id);\n    const storageType = this.getStorageType(blob);\n    const fileUrl = this.getFileUrl(blob);\n\n    const baseStyle =\n      \"width: 80px; height: 80px; border-radius: 4px; object-fit: cover;\";\n    const placeholderStyle =\n      \"display: flex; align-items: center; justify-content: center; background: #f0f0f0; font-size: 0.7em; border-radius: 4px; cursor: pointer;\";\n\n    if (mime.startsWith(\"image/\")) {\n      // For large files stored on disk, use the direct URL\n      if (storageType === \"disk\" && fileUrl) {\n        return `<img src=\"${fileUrl}\" alt=\"Thumbnail\" style=\"${baseStyle}\" loading=\"lazy\">`;\n      }\n      // For small files in database, use cached data or load on demand\n      else if (cachedData) {\n        return `<img src=\"${cachedData}\" alt=\"Thumbnail\" style=\"${baseStyle}\" loading=\"lazy\">`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD IMAGE</div>`;\n      }\n    } else if (mime.startsWith(\"video/\")) {\n      // For large files stored on disk, use the direct URL\n      if (storageType === \"disk\" && fileUrl) {\n        return `<video style=\"${baseStyle}\" controls muted><source src=\"${fileUrl}\" type=\"${mime}\"></video>`;\n      }\n      // For small files in database, use cached data or load on demand\n      else if (cachedData) {\n        return `<video style=\"${baseStyle}\" controls muted><source src=\"${cachedData}\" type=\"${mime}\"></video>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD VIDEO</div>`;\n      }\n    } else if (mime.startsWith(\"audio/\")) {\n      // For large files stored on disk, use the direct URL\n      if (storageType === \"disk\" && fileUrl) {\n        return `<audio style=\"${baseStyle}\" controls><source src=\"${fileUrl}\" type=\"${mime}\"></audio>`;\n      }\n      // For small files in database, use cached data or load on demand\n      else if (cachedData) {\n        return `<audio style=\"${baseStyle}\" controls><source src=\"${cachedData}\" type=\"${mime}\"></audio>`;\n      } else if (isLoading) {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\">Loading...</div>`;\n      } else {\n        return `<div style=\"${baseStyle} ${placeholderStyle}\" onclick=\"window.loadBlobData('${blob.id}')\">LOAD AUDIO</div>`;\n      }\n    } else if (mime === \"application/pdf\") {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">PDF</div>`;\n    } else {\n      return `<div style=\"${baseStyle} ${placeholderStyle}\">FILE</div>`;\n    }\n  }\n\n  /**\n   * Download a cached blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    const blob = this.getBlob(blobId);\n    const downloadName = filename || blob?.local_path || `blob-${blobId}`;\n\n    // Create download link\n    const a = document.createElement(\"a\");\n    a.href = cachedData;\n    a.download = downloadName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-downloaded\", {\n        detail: { id: blobId, filename: downloadName },\n      })\n    );\n\n    return true;\n  }\n\n  /**\n   * View a cached blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    const cachedData = this.getCachedDataUrl(blobId);\n    if (!cachedData) {\n      this.requestBlobData(blobId);\n      return false;\n    }\n\n    window.open(cachedData, \"_blank\");\n\n    this.dispatchEvent(\n      new CustomEvent(\"blob-viewed\", {\n        detail: { id: blobId },\n      })\n    );\n\n    return true;\n  }\n\n  /**\n   * Format file size in human-readable format\n   */\n  /**\n   * Determine storage type for a blob\n   */\n  private getStorageType(blob: MediaBlob): \"database\" | \"disk\" {\n    // Large files have local_path set (data is stripped by server for efficiency)\n    if (blob.local_path) {\n      return \"disk\";\n    }\n    // Small files have no local_path (data may be stripped by server)\n    return \"database\";\n  }\n\n  /**\n   * Get full URL for accessing a blob file\n   */\n  private getFileUrl(blob: MediaBlob): string | undefined {\n    if (blob.local_path) {\n      // local_path is stored as relative path like \"private/uploads/abc123.jpg\"\n      // Convert to full URL like \"http://localhost:8080/private/uploads/abc123.jpg\"\n      const cleanPath = blob.local_path.startsWith(\"/\")\n        ? blob.local_path.substring(1)\n        : blob.local_path;\n      return `${this.baseUrl}/${cleanPath}`;\n    }\n    return undefined;\n  }\n\n  /**\n   * Update base URL for file access\n   */\n  updateBaseUrl(baseUrl: string): void {\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\"); // Remove trailing slash\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (!bytes) return \"Unknown size\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  clearCache(): void {\n    // Revoke all object URLs to free memory\n    for (const dataUrl of this.blobDataCache.values()) {\n      URL.revokeObjectURL(dataUrl);\n    }\n\n    this.blobDataCache.clear();\n    this.loadingBlobs.clear();\n\n    this.dispatchEvent(\n      new CustomEvent(\"cache-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): {\n    cachedCount: number;\n    loadingCount: number;\n    totalBlobs: number;\n  } {\n    return {\n      cachedCount: this.blobDataCache.size,\n      loadingCount: this.loadingBlobs.size,\n      totalBlobs: this.blobs.length,\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.clearCache();\n    this.blobs = [];\n\n    // Remove all event listeners\n    const events = [\n      \"blobs-updated\",\n      \"blob-data-cached\",\n      \"blob-data-requested\",\n      \"blob-downloaded\",\n      \"blob-viewed\",\n      \"cache-cleared\",\n    ];\n    events.forEach((event) => {\n      // Remove all listeners for each event type\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket File Upload Handler\n *\n * Handles file upload processing, validation, SHA256 calculation,\n * and conversion to the blob format expected by the WebSocket server.\n * This is for small files (<10MB) that are sent via WebSocket.\n */\n\nexport interface WebSocketUploadFile {\n  file: File;\n  id: string;\n  progress: number;\n  status: \"pending\" | \"processing\" | \"uploading\" | \"completed\" | \"error\";\n  error?: string;\n}\n\nexport interface WebSocketProcessedBlob {\n  id: string;\n  data: number[];\n  sha256: string;\n  size: number;\n  mime: string;\n  source_client_id: string;\n  local_path?: string;\n  metadata: Record<string, unknown>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface WebSocketFileUploadOptions {\n  maxFileSize?: number; // in bytes, default 10MB\n  allowedMimeTypes?: string[]; // if provided, only these types are allowed\n  clientId?: string;\n  chunkSize?: number; // for future chunked uploads\n}\n\nexport class WebSocketFileUploadHandler extends EventTarget {\n  private uploads = new Map<string, WebSocketUploadFile>();\n  private options: Required<WebSocketFileUploadOptions>;\n\n  constructor(options: WebSocketFileUploadOptions = {}) {\n    super();\n\n    this.options = {\n      maxFileSize: 10 * 1024 * 1024, // 10MB default\n      allowedMimeTypes: [],\n      clientId: \"web-client\",\n      chunkSize: 64 * 1024, // 64KB chunks for future use\n      ...options,\n    };\n  }\n\n  /**\n   * Add files for upload processing\n   */\n  async addFiles(files: FileList | File[]): Promise<string[]> {\n    const fileArray = Array.from(files);\n    const uploadIds: string[] = [];\n\n    for (const file of fileArray) {\n      const uploadId = crypto.randomUUID();\n      uploadIds.push(uploadId);\n\n      const upload: WebSocketUploadFile = {\n        file,\n        id: uploadId,\n        progress: 0,\n        status: \"pending\",\n      };\n\n      this.uploads.set(uploadId, upload);\n\n      // Start processing immediately\n      this.processFile(uploadId);\n    }\n\n    return uploadIds;\n  }\n\n  /**\n   * Get upload status\n   */\n  getUpload(uploadId: string): WebSocketUploadFile | undefined {\n    return this.uploads.get(uploadId);\n  }\n\n  /**\n   * Get all uploads\n   */\n  getAllUploads(): WebSocketUploadFile[] {\n    return Array.from(this.uploads.values());\n  }\n\n  /**\n   * Remove completed or failed uploads\n   */\n  clearCompleted(): void {\n    for (const [id, upload] of this.uploads.entries()) {\n      if (upload.status === \"completed\" || upload.status === \"error\") {\n        this.uploads.delete(id);\n      }\n    }\n\n    this.dispatchEvent(\n      new CustomEvent(\"uploads-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  /**\n   * Cancel an upload\n   */\n  cancelUpload(uploadId: string): void {\n    const upload = this.uploads.get(uploadId);\n    if (upload && upload.status !== \"completed\") {\n      upload.status = \"error\";\n      upload.error = \"Cancelled by user\";\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-cancelled\", {\n          detail: { uploadId, file: upload.file },\n        })\n      );\n    }\n  }\n\n  private async processFile(uploadId: string): Promise<void> {\n    const upload = this.uploads.get(uploadId);\n    if (!upload) return;\n\n    try {\n      upload.status = \"processing\";\n      upload.progress = 0;\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-started\", {\n          detail: { uploadId, file: upload.file },\n        })\n      );\n\n      // Validate file\n      this.validateFile(upload.file);\n      upload.progress = 10;\n\n      // Read file data\n      const arrayBuffer = await this.readFile(upload.file);\n      upload.progress = 30;\n\n      // Calculate SHA256\n      const sha256 = await this.calculateSHA256(arrayBuffer);\n      upload.progress = 60;\n\n      // Convert to processed blob format\n      const processedBlob = this.createProcessedBlob(\n        upload.file,\n        arrayBuffer,\n        sha256\n      );\n      upload.progress = 90;\n\n      upload.status = \"uploading\";\n      upload.progress = 100;\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-processed\", {\n          detail: { uploadId, file: upload.file, blob: processedBlob },\n        })\n      );\n\n      // Mark as completed (actual upload handled externally)\n      upload.status = \"completed\";\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-completed\", {\n          detail: { uploadId, file: upload.file, blob: processedBlob },\n        })\n      );\n    } catch (error) {\n      upload.status = \"error\";\n      upload.error = error instanceof Error ? error.message : String(error);\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-error\", {\n          detail: { uploadId, file: upload.file, error: upload.error },\n        })\n      );\n    }\n  }\n\n  private validateFile(file: File): void {\n    // Check file size\n    if (file.size > this.options.maxFileSize) {\n      throw new Error(\n        `File \"${file.name}\" is too large (${this.formatFileSize(file.size)}). Maximum size is ${this.formatFileSize(this.options.maxFileSize)}.`\n      );\n    }\n\n    // Check MIME type if restrictions are set\n    if (this.options.allowedMimeTypes.length > 0) {\n      const mimeType = file.type || \"application/octet-stream\";\n      if (!this.options.allowedMimeTypes.includes(mimeType)) {\n        throw new Error(\n          `File type \"${mimeType}\" is not allowed. Allowed types: ${this.options.allowedMimeTypes.join(\", \")}`\n        );\n      }\n    }\n\n    // Check for empty file\n    if (file.size === 0) {\n      throw new Error(`File \"${file.name}\" is empty.`);\n    }\n  }\n\n  private readFile(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        if (reader.result instanceof ArrayBuffer) {\n          resolve(reader.result);\n        } else {\n          reject(new Error(\"Failed to read file as ArrayBuffer\"));\n        }\n      };\n\n      reader.onerror = () => {\n        reject(\n          new Error(\n            `Failed to read file: ${reader.error?.message || \"Unknown error\"}`\n          )\n        );\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  private async calculateSHA256(arrayBuffer: ArrayBuffer): Promise<string> {\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arrayBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  }\n\n  private createProcessedBlob(\n    file: File,\n    arrayBuffer: ArrayBuffer,\n    sha256: string\n  ): WebSocketProcessedBlob {\n    const data = Array.from(new Uint8Array(arrayBuffer));\n    const now = new Date().toISOString();\n\n    return {\n      id: crypto.randomUUID(),\n      data,\n      sha256,\n      size: file.size,\n      mime: file.type || \"application/octet-stream\",\n      source_client_id: this.options.clientId,\n      metadata: {\n        originalName: file.name,\n        lastModified: file.lastModified,\n        uploadedAt: now,\n        userAgent: navigator.userAgent,\n      },\n      created_at: now,\n      updated_at: now,\n    };\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (!bytes) return \"Unknown size\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getStats(): {\n    total: number;\n    pending: number;\n    processing: number;\n    uploading: number;\n    completed: number;\n    errors: number;\n  } {\n    const uploads = Array.from(this.uploads.values());\n\n    return {\n      total: uploads.length,\n      pending: uploads.filter((u) => u.status === \"pending\").length,\n      processing: uploads.filter((u) => u.status === \"processing\").length,\n      uploading: uploads.filter((u) => u.status === \"uploading\").length,\n      completed: uploads.filter((u) => u.status === \"completed\").length,\n      errors: uploads.filter((u) => u.status === \"error\").length,\n    };\n  }\n\n  /**\n   * Update options\n   */\n  updateOptions(options: Partial<WebSocketFileUploadOptions>): void {\n    this.options = { ...this.options, ...options };\n\n    this.dispatchEvent(\n      new CustomEvent(\"options-updated\", {\n        detail: { options: this.options },\n      })\n    );\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.uploads.clear();\n\n    // Remove all event listeners\n    const events = [\n      \"upload-started\",\n      \"upload-processed\",\n      \"upload-completed\",\n      \"upload-error\",\n      \"upload-cancelled\",\n      \"uploads-cleared\",\n      \"options-updated\",\n    ];\n    events.forEach((event) => {\n      // Remove all listeners for each event type\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * WebSocket Demo Client\n *\n * A unified client that orchestrates WebSocket connection, media blob management,\n * and file uploads. This provides a high-level interface that combines all the\n * modular components into a cohesive demo client.\n */\n\nimport {\n  WebSocketClient,\n  type WebSocketClientConfig,\n} from \"./websocket-client.js\";\nimport { ConnectionStatus } from \"./websocket-types.js\";\nimport {\n  MediaBlobManager,\n  type MediaBlob,\n  type MediaBlobData,\n} from \"./media-blob-manager.js\";\nimport {\n  WebSocketFileUploadHandler,\n  type WebSocketFileUploadOptions,\n} from \"./websocket-file-upload.js\";\n\nexport interface WebSocketDemoClientOptions {\n  websocket?: WebSocketClientConfig;\n  fileUpload?: WebSocketFileUploadOptions;\n  autoGetMediaBlobs?: boolean;\n  logLevel?: \"none\" | \"error\" | \"warn\" | \"info\" | \"debug\";\n}\n\nexport interface DemoClientEvent {\n  type: string;\n  timestamp: number;\n  data?: unknown;\n}\n\nexport class WebSocketDemoClient extends EventTarget {\n  private client: WebSocketClient;\n  private blobManager: MediaBlobManager;\n  private uploadHandler: WebSocketFileUploadHandler;\n  private eventLog: DemoClientEvent[] = [];\n  private options: WebSocketDemoClientOptions;\n\n  constructor(websocketUrl: string, options: WebSocketDemoClientOptions = {}) {\n    super();\n\n    this.options = {\n      autoGetMediaBlobs: true,\n      logLevel: \"info\",\n      ...options,\n    };\n\n    // Initialize components\n    this.client = new WebSocketClient({\n      url: websocketUrl,\n      debug: this.options.logLevel === \"debug\",\n      ...this.options.websocket,\n    });\n\n    this.blobManager = new MediaBlobManager();\n\n    this.uploadHandler = new WebSocketFileUploadHandler({\n      clientId: \"demo-client\",\n      ...this.options.fileUpload,\n    });\n\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    this.log(\"info\", \"Connecting to WebSocket server\");\n    this.client.connect();\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  disconnect(): void {\n    this.log(\"info\", \"Disconnecting from WebSocket server\");\n    this.client.disconnect();\n  }\n\n  /**\n   * Send a ping message\n   */\n  ping(): void {\n    this.log(\"debug\", \"Sending ping\");\n    this.client.ping();\n  }\n\n  /**\n   * Request media blobs from server\n   */\n  getMediaBlobs(limit = 10, offset = 0): void {\n    this.log(\n      \"debug\",\n      `Requesting media blobs (limit: ${limit}, offset: ${offset})`\n    );\n    this.client.getMediaBlobs(limit, offset);\n  }\n\n  /**\n   * Upload files\n   */\n  async uploadFiles(files: FileList | File[]): Promise<string[]> {\n    this.log(\"info\", `Starting upload of ${files.length} file(s)`);\n    return this.uploadHandler.addFiles(files);\n  }\n\n  /**\n   * Download a media blob\n   */\n  downloadBlob(blobId: string, filename?: string): boolean {\n    this.log(\"debug\", `Downloading blob: ${blobId}`);\n    return this.blobManager.downloadBlob(blobId, filename);\n  }\n\n  /**\n   * View a media blob in new tab\n   */\n  viewBlob(blobId: string): boolean {\n    this.log(\"debug\", `Viewing blob: ${blobId}`);\n    return this.blobManager.viewBlob(blobId);\n  }\n\n  /**\n   * Load blob data from server\n   */\n  loadBlobData(blobId: string): void {\n    this.log(\"debug\", `Loading blob data: ${blobId}`);\n    this.client.getMediaBlobData(blobId);\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionStatus(): ConnectionStatus {\n    return this.client.getStatus();\n  }\n\n  /**\n   * Check if connected\n   */\n  isConnected(): boolean {\n    return this.client.getStatus() === ConnectionStatus.Connected;\n  }\n\n  /**\n   * Get current user count\n   */\n  getUserCount(): number {\n    // User count is maintained by connection status messages\n    return 0; // TODO: Track this from ConnectionStatus messages\n  }\n\n  /**\n   * Get connection ID\n   */\n  getConnectionId(): string {\n    // Connection ID is received in Welcome message\n    return \"\"; // TODO: Track this from Welcome messages\n  }\n\n  /**\n   * Get all media blobs\n   */\n  getBlobs(): MediaBlob[] {\n    return this.blobManager.getBlobs();\n  }\n\n  /**\n   * Get blob display info\n   */\n  getBlobDisplayInfo(blob: MediaBlob) {\n    return this.blobManager.getBlobDisplayInfo(blob);\n  }\n\n  /**\n   * Get the blob manager instance\n   */\n  get mediaManager(): MediaBlobManager {\n    return this.blobManager;\n  }\n\n  /**\n   * Get upload statistics\n   */\n  getUploadStats() {\n    return this.uploadHandler.getStats();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return this.blobManager.getCacheStats();\n  }\n\n  /**\n   * Clear completed uploads\n   */\n  clearCompletedUploads(): void {\n    this.uploadHandler.clearCompleted();\n  }\n\n  /**\n   * Clear blob cache\n   */\n  clearBlobCache(): void {\n    this.blobManager.clearCache();\n  }\n\n  /**\n   * Get event log\n   */\n  getEventLog(): DemoClientEvent[] {\n    return [...this.eventLog];\n  }\n\n  /**\n   * Clear event log\n   */\n  clearEventLog(): void {\n    this.eventLog = [];\n    this.dispatchEvent(\n      new CustomEvent(\"log-cleared\", {\n        detail: { timestamp: Date.now() },\n      })\n    );\n  }\n\n  private setupEventHandlers(): void {\n    // WebSocket client events\n    this.client.on(\"statusChange\", (status) => {\n      this.log(\"info\", `Connection status changed: ${status}`);\n\n      this.dispatchEvent(\n        new CustomEvent(\"status-change\", {\n          detail: { status },\n        })\n      );\n\n      // Auto-request media blobs when connected\n      if (\n        status === ConnectionStatus.Connected &&\n        this.options.autoGetMediaBlobs\n      ) {\n        setTimeout(() => this.getMediaBlobs(), 100);\n      }\n    });\n\n    this.client.on(\"welcome\", (data) => {\n      this.log(\"info\", \"Welcome received\", data);\n      this.dispatchEvent(new CustomEvent(\"welcome\", { detail: data }));\n    });\n\n    this.client.on(\"error\", (data) => {\n      this.log(\"error\", \"Server error\", data);\n      this.dispatchEvent(new CustomEvent(\"server-error\", { detail: data }));\n    });\n\n    this.client.on(\"parseError\", (error, rawMessage) => {\n      this.log(\"error\", \"Parse error\", { error: error.message, rawMessage });\n      this.dispatchEvent(\n        new CustomEvent(\"parse-error\", {\n          detail: { error: error.message, rawMessage },\n        })\n      );\n    });\n\n    this.client.on(\"mediaBlobs\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlobs\", data });\n    });\n\n    this.client.on(\"mediaBlob\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlob\", data });\n    });\n\n    this.client.on(\"mediaBlobData\", (data) => {\n      this.handleServerMessage({ type: \"MediaBlobData\", data });\n    });\n\n    this.client.on(\"connectionStatus\", (data) => {\n      this.handleServerMessage({ type: \"ConnectionStatus\", data });\n    });\n\n    // Media blob manager events\n    this.blobManager.addEventListener(\"blobs-updated\", (e: Event) => {\n      const detail = (e as CustomEvent).detail;\n      this.log(\"info\", `Media blobs updated: ${detail.count} blobs`);\n      this.dispatchEvent(new CustomEvent(\"blobs-updated\", { detail }));\n    });\n\n    this.blobManager.addEventListener(\"blob-data-requested\", (e: Event) => {\n      const { id } = (e as CustomEvent).detail;\n      this.client.getMediaBlobData(id);\n    });\n\n    this.blobManager.addEventListener(\"blob-data-cached\", (e: Event) => {\n      const detail = (e as CustomEvent).detail;\n      this.log(\"debug\", `Blob data cached: ${detail.id}`);\n      this.dispatchEvent(new CustomEvent(\"blob-data-cached\", { detail }));\n    });\n\n    // File upload events\n    this.uploadHandler.addEventListener(\"upload-started\", (e: Event) => {\n      const { file } = (e as CustomEvent).detail;\n      this.log(\"info\", `Upload started: ${file.name}`);\n      this.dispatchEvent(\n        new CustomEvent(\"upload-started\", { detail: (e as CustomEvent).detail })\n      );\n    });\n\n    this.uploadHandler.addEventListener(\"upload-completed\", (e: Event) => {\n      const { file, blob } = (e as CustomEvent).detail;\n      this.log(\"info\", `Upload completed: ${file.name}`);\n\n      // Send the blob to the server\n      this.client.uploadMediaBlob(blob);\n\n      this.dispatchEvent(\n        new CustomEvent(\"upload-completed\", {\n          detail: (e as CustomEvent).detail,\n        })\n      );\n    });\n\n    this.uploadHandler.addEventListener(\"upload-error\", (e: Event) => {\n      const { file, error } = (e as CustomEvent).detail;\n      this.log(\"error\", `Upload failed: ${file.name}`, { error });\n      this.dispatchEvent(\n        new CustomEvent(\"upload-error\", { detail: (e as CustomEvent).detail })\n      );\n    });\n  }\n\n  private handleServerMessage(message: { type: string; data?: unknown }): void {\n    switch (message.type) {\n      case \"MediaBlobs\": {\n        const blobsData = message.data as {\n          blobs?: MediaBlob[];\n          total_count?: number;\n        };\n        this.log(\n          \"info\",\n          `Received ${blobsData?.blobs?.length || 0} media blobs`\n        );\n        this.blobManager.updateBlobs(blobsData?.blobs || []);\n        break;\n      }\n\n      case \"MediaBlob\": {\n        const blobData = message.data as { blob?: MediaBlob };\n        const blob = blobData?.blob;\n        this.log(\"info\", `Received single media blob: ${blob?.id}`);\n        break;\n      }\n\n      case \"MediaBlobData\": {\n        const blobData = message.data as MediaBlobData;\n        this.log(\"debug\", `Received blob data: ${blobData?.id}`);\n        if (blobData) {\n          this.blobManager.cacheBlobData(blobData);\n        }\n        break;\n      }\n\n      case \"Error\": {\n        const errorData = message.data as { message?: string };\n        const error = errorData?.message || \"Server error\";\n        this.log(\"error\", `Server error: ${error}`);\n        this.dispatchEvent(\n          new CustomEvent(\"server-error\", {\n            detail: { error },\n          })\n        );\n        break;\n      }\n\n      default:\n        this.log(\"debug\", `Unknown message type: ${message.type}`);\n    }\n\n    // Always emit the raw message\n    this.dispatchEvent(\n      new CustomEvent(\"message\", {\n        detail: { message },\n      })\n    );\n  }\n\n  private log(level: string, message: string, data?: unknown): void {\n    if (!this.shouldLog(level)) return;\n\n    const event: DemoClientEvent = {\n      type: level,\n      timestamp: Date.now(),\n      data: { message, data },\n    };\n\n    this.eventLog.push(event);\n\n    // Keep last 100 entries\n    if (this.eventLog.length > 100) {\n      this.eventLog = this.eventLog.slice(-100);\n    }\n\n    // Emit log event\n    this.dispatchEvent(new CustomEvent(\"log\", { detail: event }));\n\n    // Console log\n    const timestamp = new Date().toLocaleTimeString();\n    const logMessage = data\n      ? `[${timestamp}] [WebSocketDemo] ${message}: ${JSON.stringify(data, null, 2)}`\n      : `[${timestamp}] [WebSocketDemo] ${message}`;\n\n    switch (level) {\n      case \"error\":\n        console.error(logMessage);\n        break;\n      case \"warn\":\n        console.warn(logMessage);\n        break;\n      case \"debug\":\n        console.debug(logMessage);\n        break;\n      default:\n        console.log(logMessage);\n    }\n  }\n\n  private shouldLog(level: string): boolean {\n    const levels = [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n    const currentLevel = levels.indexOf(this.options.logLevel || \"info\");\n    const messageLevel = levels.indexOf(level);\n    return messageLevel <= currentLevel;\n  }\n\n  /**\n   * Destroy and clean up all resources\n   */\n  destroy(): void {\n    this.log(\"info\", \"Destroying WebSocket demo client\");\n\n    this.client.disconnect();\n    this.blobManager.destroy();\n    this.uploadHandler.destroy();\n\n    this.eventLog = [];\n\n    // Remove all event listeners\n    const events = [\n      \"status-change\",\n      \"welcome\",\n      \"blobs-updated\",\n      \"blob-data-cached\",\n      \"upload-started\",\n      \"upload-completed\",\n      \"upload-error\",\n      \"server-error\",\n      \"parse-error\",\n      \"message\",\n      \"log\",\n      \"log-cleared\",\n    ];\n    events.forEach((event) => {\n      const listeners =\n        (this as unknown as { _listeners?: Record<string, unknown[]> })\n          ._listeners?.[event] || [];\n      listeners.forEach((listener: unknown) => {\n        this.removeEventListener(event, listener as EventListener);\n      });\n    });\n  }\n}\n","/**\n * HTTP File Upload Handler\n *\n * Handles large file uploads (>10MB) via HTTP POST to the /api/upload endpoint.\n * This is for admin users only and stores files to disk rather than the database.\n */\n\nimport { z } from \"zod\";\n\n/**\n * Upload request metadata schema\n */\nexport const UploadRequestSchema = z.object({\n  filename: z.string().min(1),\n  mime_type: z.string().optional(),\n  sha256: z.string().length(64),\n  size: z.number().int().positive(),\n  metadata: z.record(z.any()).default({}),\n});\n\nexport type UploadRequest = z.infer<typeof UploadRequestSchema>;\n\n/**\n * Upload response schema\n */\nexport const UploadResponseSchema = z.object({\n  id: z.string().uuid(),\n  local_path: z.string().nullish(),\n  sha256: z.string(),\n  size: z.number().int().positive(),\n  mime_type: z.string().optional(),\n  created_at: z.string().datetime(),\n});\n\nexport type UploadResponse = z.infer<typeof UploadResponseSchema>;\n\n/**\n * Upload info schema (for GET endpoints)\n */\nexport const UploadInfoSchema = z.object({\n  id: z.string().uuid(),\n  local_path: z.string().nullish(),\n  sha256: z.string(),\n  size: z.number().int().optional(),\n  mime: z.string().optional(),\n  source_client_id: z.string().optional(),\n  metadata: z.record(z.any()).default({}),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type UploadInfo = z.infer<typeof UploadInfoSchema>;\n\n/**\n * Upload list response schema\n */\nexport const UploadListResponseSchema = z.object({\n  uploads: z.array(UploadInfoSchema),\n  total_count: z.number().int().min(0),\n  limit: z.number().int().optional(),\n  offset: z.number().int().min(0),\n});\n\nexport type UploadListResponse = z.infer<typeof UploadListResponseSchema>;\n\n/**\n * Upload error types\n */\nexport enum UploadErrorType {\n  FileTooSmall = \"FILE_TOO_SMALL\",\n  FileTooLarge = \"FILE_TOO_LARGE\",\n  InvalidFile = \"INVALID_FILE\",\n  HashCalculationFailed = \"HASH_CALCULATION_FAILED\",\n  NetworkError = \"NETWORK_ERROR\",\n  ServerError = \"SERVER_ERROR\",\n  Unauthorized = \"UNAUTHORIZED\",\n  Forbidden = \"FORBIDDEN\",\n  Conflict = \"CONFLICT\",\n}\n\nexport class UploadError extends Error {\n  constructor(\n    public type: UploadErrorType,\n    message: string,\n    public originalError?: Error\n  ) {\n    super(message);\n    this.name = \"UploadError\";\n  }\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  uploadId: string;\n  stage: \"preparing\" | \"hashing\" | \"uploading\" | \"completed\" | \"error\";\n  progress: number; // 0-100\n  bytesUploaded?: number;\n  totalBytes?: number;\n  error?: UploadError;\n}\n\n/**\n * Upload configuration\n */\nexport interface UploadConfig {\n  /** Base URL for the API (e.g., 'http://localhost:3000') */\n  baseUrl: string;\n  /** Minimum file size for large uploads (default: 10MB) */\n  minFileSize: number;\n  /** Maximum file size allowed (default: 1GB) */\n  maxFileSize: number;\n  /** Timeout for upload requests in milliseconds (default: 5 minutes) */\n  timeoutMs: number;\n  /** Include credentials in requests (default: true) */\n  credentials: boolean;\n}\n\n/**\n * HTTP File Upload Handler for large files (>10MB)\n */\nexport class FileUploadHandler extends EventTarget {\n  private config: Required<UploadConfig>;\n  private activeUploads = new Map<string, AbortController>();\n\n  constructor(config: Partial<UploadConfig> = {}) {\n    super();\n\n    this.config = {\n      baseUrl: \"http://localhost:3000\",\n      minFileSize: 10 * 1024 * 1024, // 10MB\n      maxFileSize: 1024 * 1024 * 1024, // 1GB\n      timeoutMs: 5 * 60 * 1000, // 5 minutes\n      credentials: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Upload a large file\n   */\n  async uploadFile(\n    file: File,\n    metadata: Record<string, any> = {}\n  ): Promise<UploadResponse> {\n    const uploadId = crypto.randomUUID();\n\n    try {\n      // Validate file size\n      this.validateFile(file);\n\n      // Create abort controller for this upload\n      const abortController = new AbortController();\n      this.activeUploads.set(uploadId, abortController);\n\n      // Emit progress: preparing\n      this.emitProgress({\n        uploadId,\n        stage: \"preparing\",\n        progress: 0,\n        totalBytes: file.size,\n      });\n\n      // Calculate SHA256 hash\n      this.emitProgress({\n        uploadId,\n        stage: \"hashing\",\n        progress: 10,\n        totalBytes: file.size,\n      });\n\n      const sha256 = await this.calculateSHA256(file);\n\n      this.emitProgress({\n        uploadId,\n        stage: \"hashing\",\n        progress: 50,\n        totalBytes: file.size,\n      });\n\n      // Prepare upload request\n      const uploadRequest: UploadRequest = {\n        filename: file.name,\n        mime_type: file.type || undefined,\n        sha256,\n        size: file.size,\n        metadata,\n      };\n\n      // Validate request\n      UploadRequestSchema.parse(uploadRequest);\n\n      this.emitProgress({\n        uploadId,\n        stage: \"uploading\",\n        progress: 60,\n        totalBytes: file.size,\n      });\n\n      // Create form data\n      const formData = new FormData();\n      formData.append(\"metadata\", JSON.stringify(uploadRequest));\n      formData.append(\"file\", file);\n\n      // Make upload request\n      const response = await fetch(`${this.config.baseUrl}/api/upload`, {\n        method: \"POST\",\n        body: formData,\n        credentials: this.config.credentials ? \"include\" : \"omit\",\n        signal: abortController.signal,\n      });\n\n      this.emitProgress({\n        uploadId,\n        stage: \"uploading\",\n        progress: 90,\n        bytesUploaded: file.size,\n        totalBytes: file.size,\n      });\n\n      if (!response.ok) {\n        throw await this.handleErrorResponse(response);\n      }\n\n      const result = await response.json();\n      const uploadResponse = UploadResponseSchema.parse(result);\n\n      this.emitProgress({\n        uploadId,\n        stage: \"completed\",\n        progress: 100,\n        bytesUploaded: file.size,\n        totalBytes: file.size,\n      });\n\n      return uploadResponse;\n    } catch (error) {\n      const uploadError =\n        error instanceof UploadError\n          ? error\n          : new UploadError(\n              UploadErrorType.ServerError,\n              error instanceof Error ? error.message : String(error),\n              error instanceof Error ? error : undefined\n            );\n\n      this.emitProgress({\n        uploadId,\n        stage: \"error\",\n        progress: 0,\n        error: uploadError,\n      });\n\n      throw uploadError;\n    } finally {\n      this.activeUploads.delete(uploadId);\n    }\n  }\n\n  /**\n   * Get upload information by ID\n   */\n  async getUploadInfo(id: string): Promise<UploadInfo> {\n    const response = await fetch(`${this.config.baseUrl}/api/upload/${id}`, {\n      method: \"GET\",\n      credentials: this.config.credentials ? \"include\" : \"omit\",\n    });\n\n    if (!response.ok) {\n      throw await this.handleErrorResponse(response);\n    }\n\n    const result = await response.json();\n    return UploadInfoSchema.parse(result);\n  }\n\n  /**\n   * List uploads with pagination\n   */\n  async listUploads(\n    options: { limit?: number; offset?: number } = {}\n  ): Promise<UploadListResponse> {\n    const searchParams = new URLSearchParams();\n    if (options.limit !== undefined) {\n      searchParams.set(\"limit\", options.limit.toString());\n    }\n    if (options.offset !== undefined) {\n      searchParams.set(\"offset\", options.offset.toString());\n    }\n\n    const url = `${this.config.baseUrl}/api/uploads${searchParams.toString() ? `?${searchParams}` : \"\"}`;\n\n    const response = await fetch(url, {\n      method: \"GET\",\n      credentials: this.config.credentials ? \"include\" : \"omit\",\n    });\n\n    if (!response.ok) {\n      throw await this.handleErrorResponse(response);\n    }\n\n    const result = await response.json();\n    return UploadListResponseSchema.parse(result);\n  }\n\n  /**\n   * Delete an upload by ID\n   */\n  async deleteUpload(id: string): Promise<void> {\n    const response = await fetch(`${this.config.baseUrl}/api/upload/${id}`, {\n      method: \"DELETE\",\n      credentials: this.config.credentials ? \"include\" : \"omit\",\n    });\n\n    if (!response.ok) {\n      throw await this.handleErrorResponse(response);\n    }\n  }\n\n  /**\n   * Cancel an active upload\n   */\n  cancelUpload(uploadId: string): boolean {\n    const controller = this.activeUploads.get(uploadId);\n    if (controller) {\n      controller.abort();\n      this.activeUploads.delete(uploadId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Cancel all active uploads\n   */\n  cancelAllUploads(): void {\n    for (const controller of this.activeUploads.values()) {\n      controller.abort();\n    }\n    this.activeUploads.clear();\n  }\n\n  /**\n   * Get the number of active uploads\n   */\n  getActiveUploadCount(): number {\n    return this.activeUploads.size;\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<UploadConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  private validateFile(file: File): void {\n    if (file.size < this.config.minFileSize) {\n      throw new UploadError(\n        UploadErrorType.FileTooSmall,\n        `File size ${this.formatFileSize(file.size)} is below the minimum of ${this.formatFileSize(this.config.minFileSize)}`\n      );\n    }\n\n    if (file.size > this.config.maxFileSize) {\n      throw new UploadError(\n        UploadErrorType.FileTooLarge,\n        `File size ${this.formatFileSize(file.size)} exceeds the maximum of ${this.formatFileSize(this.config.maxFileSize)}`\n      );\n    }\n\n    if (file.size === 0) {\n      throw new UploadError(UploadErrorType.InvalidFile, \"File is empty\");\n    }\n\n    // Check for dangerous filenames\n    if (\n      file.name.includes(\"..\") ||\n      file.name.includes(\"/\") ||\n      file.name.includes(\"\\\\\")\n    ) {\n      throw new UploadError(UploadErrorType.InvalidFile, \"Invalid filename\");\n    }\n  }\n\n  private async calculateSHA256(file: File): Promise<string> {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arrayBuffer);\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      return hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n    } catch (error) {\n      throw new UploadError(\n        UploadErrorType.HashCalculationFailed,\n        \"Failed to calculate file hash\",\n        error instanceof Error ? error : undefined\n      );\n    }\n  }\n\n  private async handleErrorResponse(response: Response): Promise<UploadError> {\n    let errorMessage: string;\n    let errorType: UploadErrorType;\n\n    try {\n      const errorData = await response.json();\n      errorMessage =\n        errorData.error || errorData.message || `HTTP ${response.status}`;\n    } catch {\n      errorMessage = `HTTP ${response.status} ${response.statusText}`;\n    }\n\n    switch (response.status) {\n      case 400:\n        errorType = UploadErrorType.InvalidFile;\n        break;\n      case 401:\n        errorType = UploadErrorType.Unauthorized;\n        break;\n      case 403:\n        errorType = UploadErrorType.Forbidden;\n        break;\n      case 409:\n        errorType = UploadErrorType.Conflict;\n        break;\n      case 413:\n        errorType = UploadErrorType.FileTooLarge;\n        break;\n      default:\n        errorType =\n          response.status >= 500\n            ? UploadErrorType.ServerError\n            : UploadErrorType.NetworkError;\n    }\n\n    return new UploadError(errorType, errorMessage);\n  }\n\n  private emitProgress(progress: UploadProgress): void {\n    this.dispatchEvent(\n      new CustomEvent(\"upload-progress\", {\n        detail: progress,\n      })\n    );\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (!bytes) return \"0 B\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Static helper to check if a file should use HTTP upload\n   */\n  static shouldUseHttpUpload(file: File, minSize = 10 * 1024 * 1024): boolean {\n    return file.size >= minSize;\n  }\n\n  /**\n   * Static helper to format file sizes\n   */\n  static formatFileSize(bytes: number): string {\n    if (!bytes) return \"0 B\";\n\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n}\n","/**\n * WebSocket Demo Component\n *\n * A simple demo that showcases the modular WebSocket client library\n * components without heavy styling or complex UI logic.\n */\n\n/* @jsxImportSource solid-js */\nimport { customElement } from \"solid-element\";\nimport { createSignal, createEffect, For, Show, onCleanup } from \"solid-js\";\nimport { WebSocketDemoClient } from \"../lib/websocket-demo-client.js\";\nimport { FileUploadHandler } from \"../lib/file-upload.js\";\nimport type { MediaBlob } from \"../lib/media-blob-manager.js\";\nimport type { UploadProgress } from \"../lib/file-upload.js\";\n\nexport interface WebSocketDemoProps {\n  websocketUrl?: string;\n  autoConnect?: boolean;\n  showDebugLog?: boolean;\n}\n\nconst WebSocketDemo = (props: WebSocketDemoProps) => {\n  const [client, setClient] = createSignal<WebSocketDemoClient | null>(null);\n  const [status, setStatus] = createSignal(\"disconnected\");\n  const [userCount, setUserCount] = createSignal(0);\n  const [blobs, setBlobs] = createSignal<MediaBlob[]>([]);\n  const [logs, setLogs] = createSignal<string[]>([]);\n  const [thumbnailRefresh, setThumbnailRefresh] = createSignal(0);\n  const [url, setUrl] = createSignal(\"ws://localhost:8080/ws\");\n  const [baseUrl] = createSignal(\"http://localhost:8080\");\n  const [isAdmin, setIsAdmin] = createSignal(false);\n  const [uploadProgress, setUploadProgress] = createSignal<\n    Map<string, UploadProgress>\n  >(new Map());\n  const [httpUploader, setHttpUploader] =\n    createSignal<FileUploadHandler | null>(null);\n\n  // Initialize URL from props\n  createEffect(() => {\n    const initialUrl = props.websocketUrl;\n    if (initialUrl) {\n      setUrl(initialUrl);\n    }\n  });\n\n  // File upload refs\n  let smartFileInputRef: HTMLInputElement | undefined;\n\n  // Global function for loading blob data (called from thumbnail onclick)\n\n  (\n    window as unknown as { loadBlobData: (blobId: string) => void }\n  ).loadBlobData = // eslint-disable-next-line solid/reactivity\n    (blobId: string) => {\n      client()?.loadBlobData(blobId);\n    };\n\n  // Initialize client and HTTP uploader\n  createEffect(() => {\n    const currentUrl = url();\n\n    const wsClient = new WebSocketDemoClient(currentUrl, {\n      logLevel: \"info\",\n      autoGetMediaBlobs: true,\n    });\n\n    // Initialize HTTP uploader for large files\n    const httpHandler = new FileUploadHandler({\n      baseUrl: baseUrl(),\n      minFileSize: 10 * 1024 * 1024, // 10MB\n      maxFileSize: 1024 * 1024 * 1024, // 1GB\n    });\n\n    httpHandler.addEventListener(\"upload-progress\", (e: Event) => {\n      const progress = (e as CustomEvent).detail as UploadProgress;\n      setUploadProgress((prev) => {\n        const newMap = new Map(prev);\n        newMap.set(progress.uploadId, progress);\n        return newMap;\n      });\n    });\n\n    setHttpUploader(httpHandler);\n\n    // Set up WebSocket event listeners\n    wsClient.addEventListener(\"status-change\", (e: Event) => {\n      const { status: newStatus, userCount: newUserCount } = (e as CustomEvent)\n        .detail;\n      setStatus(newStatus);\n      setUserCount(newUserCount || 0);\n    });\n\n    wsClient.addEventListener(\"blobs-updated\", (e: Event) => {\n      const blobsData = (e as CustomEvent).detail.blobs;\n      setBlobs(blobsData);\n      // Update MediaBlobManager with current base URL\n      wsClient.mediaManager?.updateBaseUrl(baseUrl());\n    });\n\n    wsClient.addEventListener(\"blob-data-cached\", () => {\n      // Trigger thumbnail refresh\n      setThumbnailRefresh((prev) => prev + 1);\n    });\n\n    wsClient.addEventListener(\"log\", (e: Event) => {\n      const { message, data } = (e as CustomEvent).detail.data;\n      const logEntry = data ? `${message}: ${JSON.stringify(data)}` : message;\n\n      setLogs((prev) => [...prev.slice(-49), logEntry]); // Keep last 50 entries\n    });\n\n    setClient(wsClient);\n\n    // Check admin status\n    fetch(\"/api/whoami\", { credentials: \"include\" })\n      .then((response) => response.json())\n      .then((data) => {\n        setIsAdmin(data.role === \"admin\");\n      })\n      .catch(() => {\n        setIsAdmin(false);\n      });\n\n    // Auto-connect if requested\n    if (props.autoConnect) {\n      wsClient.connect().catch(console.error);\n    }\n\n    // Cleanup on component unmount\n    onCleanup(() => {\n      wsClient.destroy();\n      httpHandler.cancelAllUploads();\n    });\n  });\n\n  const handleConnect = () => {\n    client()?.connect().catch(console.error);\n  };\n\n  const handleDisconnect = () => {\n    client()?.disconnect();\n  };\n\n  const handlePing = () => {\n    client()?.ping();\n  };\n\n  const handleGetBlobs = () => {\n    client()?.getMediaBlobs();\n  };\n\n  const handleFileUpload = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const files = target.files;\n    if (files && files.length > 0) {\n      handleSmartUpload(Array.from(files));\n      target.value = \"\"; // Reset input\n    }\n  };\n\n  const handleUploadClick = () => {\n    smartFileInputRef?.click();\n  };\n\n  const handleSmartUpload = async (files: File[]) => {\n    const currentClient = client();\n    const currentHttpUploader = httpUploader();\n\n    if (!currentClient || status() !== \"connected\") {\n      console.error(\"WebSocket not connected\");\n      return;\n    }\n\n    for (const file of files) {\n      const fileSize = file.size;\n      const is10MBOrLarger = fileSize >= 10 * 1024 * 1024;\n\n      if (is10MBOrLarger) {\n        // Large file - use HTTP API (admin only)\n        if (!isAdmin()) {\n          console.error(\n            `File \"${file.name}\" is ${formatFileSize(fileSize)} which requires admin access`\n          );\n          continue;\n        }\n\n        if (!currentHttpUploader) {\n          console.error(\"HTTP uploader not available\");\n          continue;\n        }\n\n        try {\n          const result = await currentHttpUploader.uploadFile(file, {\n            uploadedVia: \"websocket-demo\",\n            originalMethod: \"http\",\n          });\n          console.log(`Large file uploaded successfully: ${file.name}`, result);\n          // Refresh media blobs to show the new upload\n          handleGetBlobs();\n          // Clear this upload from progress after success\n          setTimeout(() => {\n            setUploadProgress((prev) => {\n              const newMap = new Map(prev);\n              for (const [id, progress] of newMap.entries()) {\n                if (progress.stage === \"completed\") {\n                  newMap.delete(id);\n                }\n              }\n              return newMap;\n            });\n          }, 3000);\n        } catch (error) {\n          console.error(`Failed to upload large file \"${file.name}\":`, error);\n        }\n      } else {\n        // Small file - use WebSocket\n        try {\n          await currentClient.uploadFiles([file]);\n          console.log(`Small file uploaded successfully: ${file.name}`);\n        } catch (error) {\n          console.error(`Failed to upload small file \"${file.name}\":`, error);\n        }\n      }\n    }\n  };\n\n  const handleDrop = (event: DragEvent) => {\n    event.preventDefault();\n    if (event.dataTransfer?.files) {\n      handleSmartUpload(Array.from(event.dataTransfer.files));\n    }\n  };\n\n  const handleDragOver = (event: DragEvent) => {\n    event.preventDefault();\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (!bytes) return \"0 B\";\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n    let size = bytes;\n    let unitIndex = 0;\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  const handleDownload = (blobId: string, filename?: string) => {\n    client()?.downloadBlob(blobId, filename);\n  };\n\n  const handleView = (blobId: string) => {\n    client()?.viewBlob(blobId);\n  };\n\n  const handleLoadData = (blobId: string) => {\n    client()?.loadBlobData(blobId);\n  };\n\n  const clearLogs = () => {\n    setLogs([]);\n    client()?.clearEventLog();\n  };\n\n  const getStatusColor = () => {\n    switch (status()) {\n      case \"connected\":\n        return \"#10b981\";\n      case \"connecting\":\n        return \"#f59e0b\";\n      case \"error\":\n        return \"#ef4444\";\n      default:\n        return \"#6b7280\";\n    }\n  };\n\n  return (\n    <div style={{ padding: \"1rem\", \"font-family\": \"sans-serif\" }}>\n      <style>{`\n        .demo-section { margin-bottom: 2rem; }\n        .controls { display: flex; gap: 0.75rem; margin-bottom: 1rem; flex-wrap: wrap; align-items: center; }\n        button {\n          padding: 0.5rem 1rem;\n          border: 1px solid #ccc;\n          background: white;\n          cursor: pointer;\n          border-radius: 4px;\n          font-size: 0.875rem;\n          font-weight: 500;\n        }\n        button:hover:not(:disabled) { background: #f0f0f0; }\n        button:disabled { opacity: 0.5; cursor: not-allowed; }\n        button.primary { background: #3b82f6; color: white; border-color: #3b82f6; }\n        button.primary:hover:not(:disabled) { background: #2563eb; }\n        input[type=\"text\"] {\n          padding: 0.5rem;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          min-width: 300px;\n          font-size: 0.875rem;\n        }\n        .status-indicator {\n          display: inline-block;\n          width: 12px;\n          height: 12px;\n          border-radius: 50%;\n          margin-right: 0.5rem;\n        }\n        .log-container {\n          background: #f8f9fa;\n          border: 1px solid #e9ecef;\n          border-radius: 4px;\n          padding: 1rem;\n          max-height: 300px;\n          overflow-y: auto;\n          font-family: monospace;\n          font-size: 0.875rem;\n          white-space: pre-wrap;\n        }\n        .blob-list { display: grid; gap: 1rem; }\n        .blob-item {\n          border: 1px solid #e5e7eb;\n          border-radius: 8px;\n          padding: 1rem;\n          background: white;\n        }\n        .blob-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n          margin-bottom: 0.5rem;\n        }\n        .blob-actions { display: flex; gap: 0.5rem; margin-top: 0.5rem; }\n        .blob-actions button {\n          font-size: 0.75rem;\n          padding: 0.25rem 0.5rem;\n          font-weight: normal;\n        }\n        .blob-actions a {\n          color: #3b82f6;\n          text-decoration: none;\n          font-size: 0.75rem;\n        }\n        .blob-actions a:hover {\n          text-decoration: underline;\n        }\n        .section-title {\n          margin: 0 0 1rem 0;\n          color: #374151;\n          font-weight: 600;\n        }\n        .empty-state {\n          text-align: center;\n          padding: 2rem;\n          color: #6b7280;\n          font-style: italic;\n        }\n        .smart-upload-zone {\n          border: 2px dashed #d1d5db;\n          border-radius: 8px;\n          padding: 2rem;\n          text-align: center;\n          margin: 1rem 0;\n          background: #fafafa;\n          transition: all 0.2s ease;\n          cursor: pointer;\n        }\n        .smart-upload-zone:hover {\n          border-color: #3b82f6;\n          background: #eff6ff;\n        }\n        .smart-upload-zone.disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        .upload-status {\n          background: #f3f4f6;\n          border-radius: 6px;\n          padding: 0.75rem;\n          margin: 0.5rem 0;\n          font-size: 0.875rem;\n        }\n        .upload-status.success {\n          background: #d1fae5;\n          color: #065f46;\n        }\n        .upload-status.error {\n          background: #fee2e2;\n          color: #991b1b;\n        }\n        .user-role {\n          display: inline-block;\n          padding: 0.25rem 0.5rem;\n          border-radius: 4px;\n          font-size: 0.75rem;\n          font-weight: 500;\n          margin-left: 0.5rem;\n        }\n        .user-role.admin {\n          background: #d1fae5;\n          color: #065f46;\n        }\n        .user-role.member {\n          background: #dbeafe;\n          color: #1e40af;\n        }\n      `}</style>\n\n      <h1>WebSocket Demo (Modular Components)</h1>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Connection</h2>\n        <div class=\"controls\">\n          <input\n            type=\"text\"\n            value={url()}\n            onInput={(e) => setUrl(e.target.value)}\n            placeholder=\"WebSocket URL\"\n            disabled={status() === \"connected\" || status() === \"connecting\"}\n          />\n          <button\n            class=\"primary\"\n            onClick={handleConnect}\n            disabled={status() === \"connected\" || status() === \"connecting\"}\n          >\n            Connect\n          </button>\n          <button\n            onClick={handleDisconnect}\n            disabled={status() === \"disconnected\"}\n          >\n            Disconnect\n          </button>\n        </div>\n\n        <div style={{ \"margin-bottom\": \"1rem\" }}>\n          <span\n            class=\"status-indicator\"\n            style={{ \"background-color\": getStatusColor() }}\n          />\n          Status: {status()}\n          <Show when={userCount() > 0}>\n            {\" \"}\n            ({userCount()} user{userCount() !== 1 ? \"s\" : \"\"} online)\n          </Show>\n          <span class={`user-role ${isAdmin() ? \"admin\" : \"member\"}`}>\n            {isAdmin() ? \"Admin\" : \"Member\"}\n          </span>\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Smart File Upload</h2>\n        <p\n          style={{\n            color: \"#6b7280\",\n            \"margin-bottom\": \"1rem\",\n            \"font-size\": \"0.875rem\",\n          }}\n        >\n          Drag & drop files or click to select. Files are automatically routed:\n          <br />\n          • &lt;10MB: WebSocket → Database (any user)\n          <br />• ≥10MB: HTTP API → Disk (admin only)\n        </p>\n\n        <div\n          class={`smart-upload-zone ${status() !== \"connected\" ? \"disabled\" : \"\"}`}\n          onClick={handleUploadClick}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n        >\n          <div style={{ \"font-size\": \"2rem\", \"margin-bottom\": \"0.5rem\" }}>\n            📁\n          </div>\n          <div style={{ \"font-weight\": \"500\", \"margin-bottom\": \"0.5rem\" }}>\n            Drop files here or click to upload\n          </div>\n          <div style={{ \"font-size\": \"0.875rem\", color: \"#6b7280\" }}>\n            Smart routing: Small files via WebSocket, large files via HTTP\n          </div>\n          <Show when={!isAdmin()}>\n            <div\n              style={{\n                \"font-size\": \"0.75rem\",\n                color: \"#dc2626\",\n                \"margin-top\": \"0.5rem\",\n              }}\n            >\n              ⚠️ Large file uploads (≥10MB) require admin privileges\n            </div>\n          </Show>\n        </div>\n\n        <input\n          ref={smartFileInputRef}\n          type=\"file\"\n          multiple\n          onChange={handleFileUpload}\n          disabled={status() !== \"connected\"}\n          style={{ display: \"none\" }}\n        />\n\n        <div class=\"controls\" style={{ \"margin-top\": \"1rem\" }}>\n          <button onClick={handlePing} disabled={status() !== \"connected\"}>\n            Ping\n          </button>\n          <button onClick={handleGetBlobs} disabled={status() !== \"connected\"}>\n            Refresh Media Blobs\n          </button>\n          <button onClick={clearLogs}>Clear Log</button>\n        </div>\n\n        <Show when={uploadProgress().size > 0}>\n          <div style={{ \"margin-top\": \"1rem\" }}>\n            <h3 style={{ \"margin-bottom\": \"0.5rem\", \"font-size\": \"1rem\" }}>\n              Upload Progress ({uploadProgress().size} active)\n            </h3>\n            <For each={Array.from(uploadProgress().values())}>\n              {(progress) => (\n                <div\n                  class={`upload-status ${progress.stage === \"completed\" ? \"success\" : progress.stage === \"error\" ? \"error\" : \"\"}`}\n                >\n                  {progress.stage === \"completed\" && \"✅ \"}\n                  {progress.stage === \"error\" && \"❌ \"}\n                  {progress.stage === \"uploading\" && \"📤 \"}\n                  {progress.stage}: {progress.progress}%\n                  {progress.bytesUploaded && progress.totalBytes && (\n                    <span style={{ color: \"#6b7280\" }}>\n                      {\" \"}\n                      ({formatFileSize(progress.bytesUploaded)} /{\" \"}\n                      {formatFileSize(progress.totalBytes)})\n                    </span>\n                  )}\n                  {progress.error && ` - ${progress.error.message}`}\n                </div>\n              )}\n            </For>\n            <button\n              onClick={() => setUploadProgress(new Map())}\n              style={{\n                \"margin-top\": \"0.5rem\",\n                padding: \"0.25rem 0.5rem\",\n                \"font-size\": \"0.75rem\",\n                background: \"#f3f4f6\",\n                border: \"1px solid #d1d5db\",\n                \"border-radius\": \"4px\",\n                cursor: \"pointer\",\n              }}\n            >\n              Clear Progress\n            </button>\n          </div>\n        </Show>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">Upload Capabilities</h2>\n        <div\n          style={{\n            display: \"grid\",\n            \"grid-template-columns\": \"1fr 1fr\",\n            gap: \"1rem\",\n            \"margin-bottom\": \"1rem\",\n          }}\n        >\n          <div\n            style={{\n              background: \"#dbeafe\",\n              padding: \"1rem\",\n              \"border-radius\": \"6px\",\n              border: \"1px solid #93c5fd\",\n            }}\n          >\n            <div\n              style={{\n                \"font-weight\": \"500\",\n                color: \"#1e40af\",\n                \"margin-bottom\": \"0.5rem\",\n              }}\n            >\n              💾 Small Files (&lt;10MB)\n            </div>\n            <div style={{ \"font-size\": \"0.875rem\", color: \"#1e40af\" }}>\n              • Method: WebSocket\n              <br />• Storage: Database (BYTEA)\n              <br />• Access: Any authenticated user\n              <br />• Status:{\" \"}\n              {status() === \"connected\"\n                ? \"✅ Available\"\n                : \"❌ Requires connection\"}\n            </div>\n          </div>\n          <div\n            style={{\n              background: isAdmin() ? \"#d1fae5\" : \"#fee2e2\",\n              padding: \"1rem\",\n              \"border-radius\": \"6px\",\n              border: isAdmin() ? \"1px solid #86efac\" : \"1px solid #fca5a5\",\n            }}\n          >\n            <div\n              style={{\n                \"font-weight\": \"500\",\n                color: isAdmin() ? \"#065f46\" : \"#991b1b\",\n                \"margin-bottom\": \"0.5rem\",\n              }}\n            >\n              🗄️ Large Files (≥10MB)\n            </div>\n            <div\n              style={{\n                \"font-size\": \"0.875rem\",\n                color: isAdmin() ? \"#065f46\" : \"#991b1b\",\n              }}\n            >\n              • Method: HTTP API\n              <br />• Storage: Disk files\n              <br />• Access: Admin users only\n              <br />• Status: {isAdmin() ? \"✅ Available\" : \"❌ Admin required\"}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"demo-section\">\n        <h2 class=\"section-title\">\n          Media Library ({blobs().length} files)\n          <span\n            style={{\n              \"font-size\": \"0.875rem\",\n              \"font-weight\": \"normal\",\n              color: \"#6b7280\",\n              \"margin-left\": \"0.5rem\",\n            }}\n          >\n            {blobs().filter((b) => b.local_path).length} disk,{\" \"}\n            {blobs().filter((b) => !b.local_path).length} database\n          </span>\n        </h2>\n        <Show\n          when={blobs().length > 0}\n          fallback={\n            <div class=\"empty-state\">\n              No media blobs yet. Upload a file or get blobs from server.\n            </div>\n          }\n        >\n          <div class=\"blob-list\">\n            <For each={blobs()}>\n              {(blob) => {\n                const displayInfo = () => {\n                  // Include refresh signal to make this reactive\n                  thumbnailRefresh();\n                  return client()?.getBlobDisplayInfo(blob);\n                };\n                return (\n                  <div class=\"blob-item\">\n                    <div class=\"blob-header\">\n                      <div>\n                        <strong>{blob.id}</strong>\n                        <br />\n                        <small>\n                          {displayInfo()?.mime} • {displayInfo()?.size}\n                        </small>\n                        <br />\n                        <small style={{ color: \"#6b7280\" }}>\n                          {displayInfo()?.storageType === \"disk\" ? (\n                            <span\n                              style={{\n                                background: \"#d1fae5\",\n                                color: \"#065f46\",\n                                padding: \"0.125rem 0.5rem\",\n                                \"border-radius\": \"4px\",\n                                \"font-size\": \"0.75rem\",\n                                \"font-weight\": \"500\",\n                              }}\n                            >\n                              🗄️ Disk (Large file)\n                            </span>\n                          ) : (\n                            <span\n                              style={{\n                                background: \"#dbeafe\",\n                                color: \"#1e40af\",\n                                padding: \"0.125rem 0.5rem\",\n                                \"border-radius\": \"4px\",\n                                \"font-size\": \"0.75rem\",\n                                \"font-weight\": \"500\",\n                              }}\n                            >\n                              💾 Database (Small file)\n                            </span>\n                          )}\n                        </small>\n                      </div>\n                      {/* eslint-disable-next-line solid/no-innerhtml */}\n                      <div innerHTML={displayInfo()?.thumbnailHtml} />\n                    </div>\n                    <div>\n                      <small style={{ color: \"#6b7280\" }}>\n                        {blob.local_path ? (\n                          <>\n                            Path: {blob.local_path}\n                            <br />\n                            <a\n                              href={displayInfo()?.fileUrl}\n                              target=\"_blank\"\n                              rel=\"noopener\"\n                              style={{\n                                color: \"#3b82f6\",\n                                \"text-decoration\": \"none\",\n                              }}\n                            >\n                              🔗 Direct file access\n                            </a>\n                          </>\n                        ) : (\n                          \"Stored in database\"\n                        )}\n                        <br />\n                        Created: {new Date(blob.created_at).toLocaleString()}\n                        <br />\n                        Source: {blob.source_client_id || \"Unknown\"}\n                      </small>\n                    </div>\n                    <div class=\"blob-actions\">\n                      <Show when={displayInfo()?.storageType === \"disk\"}>\n                        <button\n                          onClick={() =>\n                            window.open(displayInfo()?.fileUrl, \"_blank\")\n                          }\n                          style={{\n                            background: \"#10b981\",\n                            color: \"white\",\n                            border: \"none\",\n                          }}\n                        >\n                          🚀 Open File\n                        </button>\n                      </Show>\n                      <button\n                        onClick={() => handleDownload(blob.id, blob.local_path)}\n                      >\n                        📥 Download\n                      </button>\n                      <Show when={displayInfo()?.storageType === \"database\"}>\n                        <button onClick={() => handleView(blob.id)}>\n                          👁️ Preview\n                        </button>\n                        <button onClick={() => handleLoadData(blob.id)}>\n                          📊 Load Data\n                        </button>\n                      </Show>\n                    </div>\n                  </div>\n                );\n              }}\n            </For>\n          </div>\n        </Show>\n      </div>\n\n      <Show when={props.showDebugLog}>\n        <div class=\"demo-section\">\n          <h2 class=\"section-title\">Debug Log</h2>\n          <div class=\"controls\">\n            <button onClick={clearLogs}>Clear Log</button>\n          </div>\n          <div class=\"log-container\">\n            <For each={logs()}>{(log) => <div>{log}</div>}</For>\n            <Show when={logs().length === 0}>\n              <div style={{ color: \"#6b7280\", \"font-style\": \"italic\" }}>\n                No log entries yet...\n              </div>\n            </Show>\n          </div>\n        </div>\n      </Show>\n    </div>\n  );\n};\n\n// Register as custom element\ncustomElement(\n  \"websocket-demo\",\n  {\n    websocketUrl: \"ws://localhost:8080/ws\",\n    autoConnect: false,\n    showDebugLog: true,\n  },\n  WebSocketDemo\n);\n\nexport { WebSocketDemo };\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"websocket-demo\": {\n        websocketUrl?: string;\n        autoConnect?: boolean;\n        showDebugLog?: boolean;\n      };\n    }\n  }\n}\n/* eslint-enable @typescript-eslint/no-namespace */\n"],"names":["MediaBlobManager","baseUrl","blobs","blob","id","blobData","uint8Array","dataUrl","blobId","storageType","fileUrl","mime","cachedData","isLoading","baseStyle","placeholderStyle","filename","downloadName","a","cleanPath","bytes","units","size","unitIndex","event","listener","WebSocketFileUploadHandler","options","files","fileArray","uploadIds","file","uploadId","upload","arrayBuffer","sha256","processedBlob","error","mimeType","resolve","reject","reader","hashBuffer","b","data","now","uploads","u","WebSocketDemoClient","websocketUrl","WebSocketClient","limit","offset","ConnectionStatus","status","rawMessage","detail","message","blobsData","level","timestamp","logMessage","levels","currentLevel","UploadRequestSchema","z.object","z.string","z.number","z.record","z.any","UploadResponseSchema","UploadInfoSchema","UploadListResponseSchema","z.array","UploadError","type","originalError","FileUploadHandler","config","metadata","abortController","uploadRequest","formData","response","result","uploadResponse","uploadError","searchParams","url","controller","errorMessage","errorType","errorData","progress","minSize","WebSocketDemo","props","client","setClient","createSignal","setStatus","userCount","setUserCount","setBlobs","logs","setLogs","thumbnailRefresh","setThumbnailRefresh","setUrl","isAdmin","setIsAdmin","uploadProgress","setUploadProgress","Map","httpUploader","setHttpUploader","createEffect","initialUrl","smartFileInputRef","window","loadBlobData","currentUrl","wsClient","logLevel","autoGetMediaBlobs","httpHandler","minFileSize","maxFileSize","addEventListener","e","prev","newMap","set","newStatus","newUserCount","mediaManager","updateBaseUrl","logEntry","JSON","stringify","slice","fetch","credentials","then","json","role","catch","autoConnect","connect","console","onCleanup","destroy","cancelAllUploads","handleConnect","handleDisconnect","disconnect","handlePing","ping","handleGetBlobs","getMediaBlobs","handleFileUpload","target","length","handleSmartUpload","Array","from","value","handleUploadClick","click","currentClient","currentHttpUploader","fileSize","name","formatFileSize","uploadFile","uploadedVia","originalMethod","log","setTimeout","entries","stage","delete","uploadFiles","handleDrop","preventDefault","dataTransfer","handleDragOver","toFixed","handleDownload","downloadBlob","handleView","viewBlob","handleLoadData","clearLogs","clearEventLog","getStatusColor","_el$","_tmpl$6","_el$2","firstChild","_el$3","nextSibling","_el$4","_el$5","_el$6","_el$7","_el$8","_el$9","_el$0","_el$1","_el$10","_el$11","_el$12","_el$13","_el$14","_el$15","_el$16","_el$17","_el$18","_el$20","_el$21","_el$22","_el$23","_el$24","_el$31","_el$32","_el$33","_el$34","_el$35","_el$36","_el$37","_el$38","_el$39","_el$40","_el$41","_el$42","_el$45","_el$46","_el$47","_el$48","_el$49","_el$50","_el$51","_el$52","_el$53","_el$55","_el$56","_el$57","_el$64","_el$58","_el$59","_el$60","_el$63","style","setProperty","$$input","$$click","_$insert","_$createComponent","Show","when","children","_$memo","_el$19","_tmpl$","_ref$","_$use","_el$25","_tmpl$2","_el$26","_el$27","_el$29","_el$30","For","each","values","_el$72","_tmpl$7","_el$73","_el$75","_c$","bytesUploaded","totalBytes","_el$76","_tmpl$8","_el$77","_el$82","_el$79","_el$83","_$effect","_$className","filter","local_path","fallback","_tmpl$9","_el$65","_tmpl$3","displayInfo","getBlobDisplayInfo","_el$85","_tmpl$11","_el$86","_el$87","_el$88","_el$89","_el$90","_el$91","_el$92","_el$93","_el$94","_el$95","_el$96","_el$97","_el$98","_el$99","_el$101","_el$103","_c$2","_el$106","_tmpl$12","_el$107","_tmpl$13","_c$3","_tmpl$14","_el$109","_tmpl$15","_$setAttribute","Date","created_at","toLocaleString","source_client_id","_el$102","_tmpl$0","open","_el$104","_tmpl$1","_el$105","_tmpl$10","innerHTML","thumbnailHtml","showDebugLog","_el$66","_tmpl$5","_el$67","_el$68","_el$69","_el$70","_el$110","_tmpl$16","_el$71","_tmpl$4","_p$","_v$","_v$2","_v$3","_v$4","_v$5","_v$6","_v$7","_v$8","_v$9","_v$0","_v$1","_v$10","_v$11","disabled","t","o","removeProperty","i","n","s","h","r","d","l","c","undefined","customElement","_$delegateEvents"],"mappings":"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"}