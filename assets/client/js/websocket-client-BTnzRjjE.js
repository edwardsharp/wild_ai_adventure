import{s as i,o as t,w as y,n as c,b as p,f,x as b,y as n,e as S}from"./types-4vF2br7O.js";const d=i().uuid(),m=i().datetime(),g=t({id:d,data:p(c()).optional(),sha256:i(),size:c().int().optional(),mime:i().optional(),source_client_id:i().optional(),local_path:i().optional(),metadata:y(f()).default({}),created_at:m,updated_at:m});b("type",[t({type:n("Ping")}),t({type:n("GetMediaBlobs"),data:t({limit:c().int().positive().optional(),offset:c().int().min(0).optional()}).optional()}),t({type:n("UploadMediaBlob"),data:t({blob:g})}),t({type:n("GetMediaBlob"),data:t({id:d})}),t({type:n("GetMediaBlobData"),data:t({id:d})}),t({type:n("GetMediaBlobData"),data:t({id:d})})]);const k=b("type",[t({type:n("Welcome"),data:t({message:i(),user_id:d.optional(),connection_id:i()})}),t({type:n("Pong")}),t({type:n("MediaBlobs"),data:t({blobs:p(g),total_count:c().int().min(0)})}),t({type:n("MediaBlob"),data:t({blob:g})}),t({type:n("MediaBlobData"),data:t({id:d,data:p(c()),mime:i().optional()})}),t({type:n("Error"),data:t({message:i(),code:i().optional()})}),t({type:n("ConnectionStatus"),data:t({connected:S(),user_count:c().int().min(0)})})]);var r=(s=>(s.Disconnected="disconnected",s.Connecting="connecting",s.Connected="connected",s.Error="error",s))(r||{});const h={ping:()=>({type:"Ping"}),getMediaBlobs:(s,e)=>({type:"GetMediaBlobs",data:{limit:s,offset:e}}),getMediaBlob:s=>({type:"GetMediaBlob",data:{id:s}}),getMediaBlobData:s=>({type:"GetMediaBlobData",data:{id:s}}),uploadMediaBlob:s=>({type:"UploadMediaBlob",data:{blob:s}})},B=s=>k.safeParse(s);class T{socket=null;config;status=r.Disconnected;listeners={};reconnectAttempts=0;reconnectTimer=null;pingInterval=null;constructor(e){this.config={autoReconnect:!0,reconnectDelay:3e3,maxReconnectAttempts:0,debug:!1,...e}}on(e,o){this.listeners[e]=o}off(e){delete this.listeners[e]}getStatus(){return this.status}connect(){if(this.socket?.readyState===WebSocket.OPEN){this.log("Already connected");return}this.setStatus(r.Connecting),this.log(`Connecting to ${this.config.url}`);try{this.socket=new WebSocket(this.config.url),this.setupSocketListeners()}catch(e){this.log("Connection error:",e),this.setStatus(r.Error),this.scheduleReconnect()}}disconnect(){this.log("Disconnecting..."),this.clearReconnectTimer(),this.clearPingInterval(),this.socket&&(this.socket.close(1e3,"Client disconnect"),this.socket=null),this.setStatus(r.Disconnected)}send(e){if(!this.socket||this.socket.readyState!==WebSocket.OPEN)return this.log("Cannot send message: not connected"),!1;try{const o=JSON.stringify(e);return this.socket.send(o),this.log("Sent message:",e),!0}catch(o){return this.log("Send error:",o),!1}}ping(){return this.send(h.ping())}getMediaBlobs(e,o){return this.send(h.getMediaBlobs(e,o))}getMediaBlob(e){return this.send(h.getMediaBlob(e))}uploadMediaBlob(e){return this.send(h.uploadMediaBlob(e))}setupSocketListeners(){this.socket&&(this.socket.onopen=()=>{this.log("Connected"),this.setStatus(r.Connected),this.reconnectAttempts=0,this.startPing()},this.socket.onclose=e=>{this.log(`Connection closed: ${e.code} ${e.reason}`),this.clearPingInterval(),this.setStatus(r.Disconnected),this.config.autoReconnect&&e.code!==1e3&&this.scheduleReconnect()},this.socket.onerror=e=>{this.log("Socket error:",e),this.setStatus(r.Error)},this.socket.onmessage=e=>{this.handleMessage(e.data)})}handleMessage(e){this.log("Received raw message:",e),this.listeners.rawMessage?.(e);try{const o=JSON.parse(e),l=B(o);if(!l.success){const u=new Error(`Message parse error: ${l.error.message}`);this.log("Parse error:",u),this.listeners.parseError?.(u,e);return}const a=l.data;switch(this.log("Parsed message:",a),a.type){case"Welcome":this.listeners.welcome?.(a.data);break;case"Pong":this.log("Received pong");break;case"MediaBlobs":this.listeners.mediaBlobs?.(a.data);break;case"MediaBlob":this.listeners.mediaBlob?.(a.data);break;case"Error":this.listeners.error?.(a.data);break;case"ConnectionStatus":this.listeners.connectionStatus?.(a.data);break;default:this.log("Unknown message type:",a)}}catch(o){const l=new Error(`JSON parse error: ${o}`);this.log("JSON parse error:",l),this.listeners.parseError?.(l,e)}}setStatus(e){this.status!==e&&(this.status=e,this.log(`Status changed to: ${e}`),this.listeners.statusChange?.(e))}scheduleReconnect(){if(this.config.autoReconnect){if(this.config.maxReconnectAttempts>0&&this.reconnectAttempts>=this.config.maxReconnectAttempts){this.log("Max reconnection attempts reached");return}this.clearReconnectTimer(),this.reconnectAttempts++,this.log(`Scheduling reconnect attempt ${this.reconnectAttempts} in ${this.config.reconnectDelay}ms`),this.reconnectTimer=window.setTimeout(()=>{this.connect()},this.config.reconnectDelay)}}clearReconnectTimer(){this.reconnectTimer!==null&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null)}startPing(){this.clearPingInterval(),this.pingInterval=window.setInterval(()=>{this.ping()},3e4)}clearPingInterval(){this.pingInterval!==null&&(clearInterval(this.pingInterval),this.pingInterval=null)}log(...e){this.config.debug&&console.log("[WebSocketClient]",...e)}}export{r as C,T as W};
//# sourceMappingURL=websocket-client-BTnzRjjE.js.map
