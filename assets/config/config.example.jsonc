// WebAuthn Server Configuration Example
//
// This is a comprehensive example configuration with inline comments explaining
// each option. Copy this to config.jsonc and customize for your setup.
//
// For JSON Schema support in your editor:
//   cargo run --bin cli config schema
//
// To validate your configuration:
//   cargo run --bin cli config validate
//
{
  // Application metadata and identification
  "app": {
    "name": "WebAuthn Demo", // Display name for your application
    "version": "1.0.0", // Application version
    "environment": "development", // Environment: development, staging, production
    "description": "WebAuthn authentication server with invite codes" // Optional description
  },

  // Database connection and pool settings
  "database": {
    "host": "localhost", // Database server hostname or IP
    "port": 5432, // Database server port (default PostgreSQL: 5432)
    "name": "webauthn_db", // Database name to connect to
    "user": "postgres", // Database username

    // Connection pool configuration
    "pool": {
      "max_connections": 10, // Maximum concurrent database connections
      "min_connections": 1, // Minimum connections to maintain in pool
      "connect_timeout_seconds": 30, // Timeout when establishing new connections
      "idle_timeout_seconds": 600 // How long idle connections can remain in pool (10 min)
    },

    // Database migration settings
    "migrations": {
      "auto_run": true // Automatically run migrations on startup
    }
  },

  // WebAuthn/FIDO2 authentication configuration
  "webauthn": {
    "rp_id": "localhost", // Relying Party ID - MUST match your domain (CANNOT CHANGE after deployment!)
    "rp_name": "WebAuthn Demo", // Human-readable name shown to users during authentication
    "rp_origin": "http://localhost:8080" // Complete origin URL (must match actual server URL)
  },

  // HTTP server configuration
  "server": {
    "host": "0.0.0.0", // Interface to bind to (0.0.0.0 = all interfaces, 127.0.0.1 = localhost only)
    "port": 8080 // Port to listen on
  },

  // Session management settings
  "sessions": {
    "max_age_seconds": 3600, // Session duration in seconds (1 hour). Set to 0 or negative for sessions that never expire.
    "secure": false, // Use secure cookies (set true for HTTPS)
    "same_site": "strict", // SameSite attribute: "strict", "lax", or "none"
    "http_only": true // Prevent JavaScript access to session cookies
  },



  // Logging and tracing configuration
  "logging": {
    "level": "info", // Log level: "trace", "debug", "info", "warn", "error"

    // Optional: HTTP access logging
    "access_log": {
      "enabled": false, // Enable HTTP access logging to files
      "file_path": "logs/access.log", // Access log file path
      "format": "combined", // Format: "common", "combined", or "custom"
      "also_log_to_tracing": false // Also send to main application logger
    }
  },

  // Analytics and metrics configuration
  "analytics": {
    // Metrics endpoints configuration
    "metrics": {
      "enabled": false, // Enable metrics HTTP endpoints
      "prometheus_endpoint": "/metrics", // Prometheus-format metrics endpoint
      "health_endpoint": "/health" // Health check endpoint
    }
  },

  // Static file serving configuration
  "static_files": {
    "public_directory": "assets/public", // Directory for public files (accessible to all)
    "private_directory": "assets/private", // Directory for private files (authentication required)
    "assets_directory": "assets" // Main assets directory (contains both JS and WASM frontends)
  },

  // Storage backend configuration
  "storage": {
    // Analytics storage: where to store request analytics data
    "analytics": "memory", // "memory" for in-memory storage, "postgres" for PostgreSQL database

    // Session storage: where to store user session data
    "sessions": "memory" // "memory" for in-memory storage, "postgres" for PostgreSQL database
  },

  // Media and file upload configuration
  "media": {
    "max_blob_file_size": 10485760, // Maximum size for blobs in database (10MB = 10 * 1024 * 1024 bytes)
    "max_fs_file_size": 1073741824 // Maximum size for files on filesystem (1GB = 1024 * 1024 * 1024 bytes)
  },

  // Development-specific settings (only active when environment = "development")
  "development": {
    "auto_generate_invites": true // Automatically generate invite codes on startup
  },



  // Feature flags - enable/disable functionality
  "features": {
    "registration_enabled": true, // Allow new user registration
    "invite_codes_required": true, // Require invite codes for user registration
    "analytics_enabled": true // Enable request analytics collection
  }
}
